" {{{ StripTrailingWhitespace
function! StripTrailingWhitespace()
    if !&binary && &filetype != 'diff'
        normal mz
        normal Hmy
        %s/\s\+$//e
        normal 'yz<CR>
        normal `z
    endif
endfunction
command! StripTrailingWhitespace call StripTrailingWhitespace()
"}}}

" {{{ StripDoubleEmptyLines
function! StripDoubleEmptyLines()
    if !&binary && &filetype != 'diff'
        normal mz
        normal Hmy
        %s/\(^\s*$\n\)\{2,\}/\r/e
        normal 'yz<CR>
        normal `z
    endif
endfunction
command! StripDoubleEmptyLines call StripDoubleEmptyLines()
"}}}

" {{{ ConvertToUnix
function! DosToUnix()
    execute "update"
    execute "edit ++ff=dos"
    execute "setlocal ff=unix"
    execute "write"
endfunction
command! DosToUnix call DosToUnix()
"}}}

" {{{ GuiTabLabel
function! GuiTabLabel()
    " Append the tab number
    let label=v:lnum . ': '
    let bufnrlist=tabpagebuflist(v:lnum)

    " Append the buffer name
    let name=bufname(bufnrlist[tabpagewinnr(v:lnum) - 1])
    if name == ''
        " give a name to no-name documents
        if &buftype=='quickfix'
            let name='[Quickfix List]'
        else
            let name='[No Name]'
        endif
    else
        " get only the file name
        let name=fnamemodify(name,":t")
    endif

    let label .= name

    " Add '+' if one of the buffers in the tab page is modified
    for bufnr in bufnrlist
        if getbufvar(bufnr, "&modified")
            let label .= ' [+]'
            break
        endif
    endfor

    return label
endfunction
"}}}

" {{{ ConfigureProject
function! ConfigureProject(source, dest)
    let l:source = escape(expand(a:source), ' ')
    let l:dest = escape(expand(a:dest), ' ')

    execute "chdir " . l:source
    let g:vdebug_options['path_maps'] = {
                \    substitute(l:dest, '.*:', '', 'g') : l:source,
                \ }

    let l:rsync_options = [
                \ '--archive',
                \ '--chmod="ug=rwX,o=rX"',
                \ '--compress',
                \ '--cvs-exclude',
                \ '--delete',
                \ '--log-file=sync.log',
                \ '--prune-empty-dirs',
                \ '--verbose',
                \ '--whole-file',
                \ ]
    let l:rsync_ignore = [
                \ '"*.pyc"',
                \ '".*swp"',
                \ '".fstemp.*"',
                \ '".git*"',
                \ '"DS_Store"',
                \ '"bin"',
                \ '"build"',
                \ '"cscope.out*"',
                \ '"debug.log"',
                \ '"logs"',
                \ '"phpunit.*"',
                \ '"reports"',
                \ '"sync.log"',
                \ '"tests*"',
                \ '"vagrant"',
                \ ]

    let g:rsync_command = 'rsync ' . join(l:rsync_options, ' ')
                \ . ' --exclude=' . join(l:rsync_ignore, ' --exclude=')
                \ . ' ' . l:source . ' ' . l:dest

    nnoremap <silent> ,ds :silent execute "Dispatch! " . g:rsync_command<cr>

    autocmd! BufWritePost,FileWritePost *
                \ silent execute '!' . g:rsync_command . ' >> /dev/null 2>&1 &'
endfunction
"}}}

" {{{ ConfigurePhpProject
function! ConfigurePhpProject()
    compiler phpunit_local
    nnoremap <silent> ,dt :Dispatch ./bin/phpunit --strict --verbose --filter %:t:r<cr>

    let g:vdebug_options['server'] = '192.168.56.1'
endfunction
"}}}

" {{{ LoadCTagsFile
function! LoadCTagsFile(file)
    let l:file = escape(expand(vimfiles . '/persistent-tags/' . a:file))
    execute 'silent setlocal tags-=' . l:file
    execute 'silent setlocal tags+=' . l:file
endfunction
"}}}

" vim: filetype=vim textwidth=80 foldmethod=marker
