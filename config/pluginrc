" {{{ NeoBundle
" {{{ g:neobundle#install_max_processes
" The max number of processes used for neobundle/install source asynchronous
" update.
let g:neobundle#install_max_processes=1
"}}}

let g:bundlePath=split(&runtimepath, ',')[0] . '/bundle'
let g:pathToNeoBundle=expand(bundlePath).'/NeoBundle'
if filereadable(pathToNeoBundle.'/plugin/neobundle.vim')
    " {{{ initialize
    if has('vim_starting')
        set nocompatible
        let &runtimepath.=','.expand(pathToNeoBundle)
    endif
    "}}}

    " {{{ bundle path and call NeoBundle
    call neobundle#rc(expand(bundlePath))
    "}}}

    " {{{ Bundles
    NeoBundleFetch 'Shougo/neobundle.vim', {
                \ 'directory' : 'NeoBundle',
                \ 'name'      : 'NeoBundle',
                \ }

    NeoBundle 'Shougo/vimproc.vim', {
                \ 'directory' : 'VimProc',
                \ 'name'      : 'VimProc', 
                \ 'build' : {
                \     'windows' : 'vimproc_updcmd',
                \     'cygwin'  : 'make -f make_cygwin.mak',
                \     'mac'     : 'make -f make_mac.mak',
                \     'unix'    : 'make -f make_unix.mak',
                \     }
                \ }
    NeoBundle 'Shougo/vimshell.vim', {
                \ 'directory' : 'Shell',
                \ 'name'      : 'Shell',
                \ }

    NeoBundle 'bling/vim-airline', {
                \ 'directory' : 'Airline',
                \ 'name'      : 'Airline',
                \ }
    NeoBundle 'vim-scripts/Align', {
                \ 'directory' : 'Align',
                \ 'name'      : 'Align',
                \ }
    NeoBundle 'jiangmiao/auto-pairs', {
                \ 'directory' : 'AutoPairs',
                \ 'name'      : 'AutoPairs',
                \ }
    NeoBundle 'mattn/calendar-vim', {
                \ 'directory' : 'Calendar',
                \ 'name'      : 'Calendar',
                \ }
    NeoBundle 'vim-scripts/closetag.vim', {
                \ 'directory' : 'CloseTag',
                \ 'name'      : 'CloseTag',
                \ }
    NeoBundle 'flazz/vim-colorschemes', {
                \ 'directory' : 'Colorschemes',
                \ 'name'      : 'Colorschemes',
                \ }
    NeoBundle 'http://conque.googlecode.com/svn/trunk/', {
                \ 'directory' : 'Conque',
                \ 'name'      : 'Conque',
                \ }
    NeoBundle 'rking/vim-detailed', {
                \ 'directory' : 'Detailed',
                \ 'name'      : 'Detailed',
                \ }
    NeoBundle 'vim-scripts/EnhCommentify.vim', {
                \ 'directory' : 'EnhancedCommentify',
                \ 'name'      : 'EnhancedCommentify',
                \ }
    NeoBundle 'tpope/vim-fugitive', {
                \ 'directory' : 'FuGITive',
                \ 'name'      : 'FuGITive',
                \ }
    NeoBundle 'sjl/gundo.vim.git', {
                \ 'directory' : 'Gundo',
                \ 'name'      : 'Gundo',
                \ }
    NeoBundle 'git://git.code.sf.net/p/vim-latex/vim-latex', {
                \ 'directory' : 'LaTeX',
                \ 'name'      : 'LaTeX',
                \ }
    NeoBundle 'gregsexton/MatchTag', {
                \ 'directory' : 'MatchTag',
                \ 'name'      : 'MatchTag',
                \ }
    NeoBundle 'Shougo/neocomplete', {
                \ 'directory'   : 'NeoComplete',
                \ 'name'        : 'NeoComplete',
                \ 'disabled'    : !has('lua'),
                \ 'vim_version' : '7.3.885',
                \ }
    NeoBundle 'Shougo/neocomplcache', {
                \ 'directory' : 'NeoCompleteCache',
                \ 'name'      : 'NeoCompleteCache',
                \ 'disabled'  : has('lua'),
                \ }
    NeoBundle 'Shougo/neomru.vim', {
                \ 'directory' : 'NeoMRU',
                \ 'name'      : 'NeoMRU',
                \ }
    NeoBundle 'Shougo/neosnippet', {
                \ 'directory' : 'NeoSnippet',
                \ 'name'      : 'NeoSnippet',
                \ }
    NeoBundle 'Shougo/neosnippet-snippets', {
                \ 'directory' : 'NeoSnippet-Snippets',
                \ 'name'      : 'NeoSnippet-Snippets',
                \ }
    NeoBundle 'rkitover/vimpager', {
                \ 'directory' : 'Pager',
                \ 'name'      : 'Pager',
                \ }
    NeoBundle 'shawncplus/phpcomplete.vim', {
                \ 'directory' : 'PHP-Complete',
                \ 'name'      : 'PHP-Complete',
                \ }
    NeoBundle 'vim-php/tagbar-phpctags.vim', {
                \ 'directory' : 'PHP-CTags',
                \ 'name'      : 'PHP-CTags',
                \ 'build'     : {
                \     'cygwin'  : 'make',
                \     'mac'     : 'make',
                \     'unix'    : 'make',
                \     'windows' : 'make',
                \     },
                \ }
    NeoBundle 'nishigori/vim-php-dictionary', {
                \ 'directory' : 'PHP-Dictionary',
                \ 'name'      : 'PHP-Dictionary',
                \ }
    NeoBundle 'tobyS/pdv', {
                \ 'directory' : 'PHP-Doc',
                \ 'name'      : 'PHP-Doc',
                \ }
    NeoBundle 'QafooLabs/php-refactoring-browser', {
                \ 'directory' : 'PHP-Refactoring-Browser',
                \ 'name'      : 'PHP-Refactoring-Browser',
                \ 'build'     : {
                \     'cygwin'  : '',
                \     'mac'     : 'curl -sS https://getcomposer.org/installer | php && php composer.phar install',
                \     'unix'    : 'curl -sS https://getcomposer.org/installer | php && php composer.phar install',
                \     'windows' : '',
                \     },
                \ }
    NeoBundle 'vim-php/vim-php-refactoring', {
                \ 'directory' : 'PHP-Refactoring',
                \ 'name'      : 'PHP-Refactoring',
                \ }
    NeoBundle "jmcomets/vim-pony", {
                \ 'directory' : 'Pony',
                \ 'name'      : 'Pony'
                \ }
    NeoBundle 'rodjek/vim-puppet', {
                \ 'directory' : 'Puppet',
                \ 'name'      : 'Puppet',
                \ }
    NeoBundle 'kien/rainbow_parentheses.vim', {
                \ 'directory' : 'Rainbow_Parentheses',
                \ 'name'      : 'Rainbow_Parentheses',
                \ }
    NeoBundle 'ciaranm/securemodelines', {
                \ 'directory' : 'SecureModelines',
                \ 'name'      : 'SecureModelines',
                \ }
"    NeoBundle 'vim-scripts/ShowMarks', {
"                \ 'directory' : 'ShowMarks',
"                \ 'name'      : 'ShowMarks',
"                \ }
    NeoBundle 'honza/vim-snippets', {
                \ 'directory' : 'Snippets',
                \ 'name'      : 'Snippets',
                \ }
    NeoBundle 'ervandew/supertab', {
                \ 'directory' : 'Supertab',
                \ 'name'      : 'Supertab',
                \ }
    NeoBundle 'tpope/vim-surround', {
                \ 'directory' : 'Surround',
                \ 'name'      : 'Surround',
                \ }
    NeoBundle 'scrooloose/syntastic', {
                \ 'directory' : 'Syntastic',
                \ 'name'      : 'Syntastic',
                \ }
    NeoBundle 'majutsushi/tagbar', {
                \ 'directory' : 'Tagbar',
                \ 'name'      : 'Tagbar',
                \ }
    NeoBundle 'Shougo/unite.vim', {
                \ 'directory' : 'Unite',
                \ 'name'      : 'Unite',
                \ }
    NeoBundle 'Shougo/unite-session', {
                \ 'directory' : 'Unit-Session',
                \ 'name'      : 'Unit-Session',
                \ }
    NeoBundle 'Shougo/neossh.vim', {
                \ 'directory' : 'Unit-SSH',
                \ 'name'      : 'Unit-SSH',
                \ }
    NeoBundle 'Shougo/vimfiler.vim', {
                \ 'directory' : 'Vimfiler',
                \ 'name'      : 'Vimfiler',
                \ }
    "}}}

    " {{{ NeoBundleCheck
    " Check plugins installation. If plugins are not installed, it will execute
    " :NeoBundleInstall automatically. This command also check
    " enabledocumentation directories and will execute :NeoBundleDocs
    " automaticallyally.
    NeoBundleCheck
    "}}}
endif
unlet pathToNeoBundle
unlet bundlePath
"}}}

" {{{ Bufexplrorer disabled
let g:bufexplorer_version=1
" }}}

" {{{ MiniBufExpl disabled
let g:loaded_minibufexplorer=1
" }}}

" {{{ Airline
" {{{ tabline
" enable/disable enhanced tabline.
let g:airline#extensions#tabline#enabled=0
"}}}
"}}}

" {{{ Calendar
" if you want to keep focus when goto next or prev calendar, add the following
" to your .vimrc:
let g:calendar_focus_today=1

" if you want the week to start with monday, add below to your .vimrc:
"   let g:calendar_monday=1
" (You don't have to to change g:calendar_wruler!)
let g:calendar_monday=1
"}}}

" {{{ EnhancedCommentify
" With this option set, the script tries to figure out which filetype to use
" for every block by using the synID of the block. This improves handling of
" embedded languages eg. CSS in HTML, Perl in VimL... But be aware, that this
" feature currently relies on a special form of the names of the syntax items.
" So it might not work with every syntax file (see EnhComm-Bugs). It also
" calls synID only once for every block! So the first line is significant. Be
" aware, that "cross" commenting might cause problems.
let g:EnhCommentifyUseSyntax='Yes'
"}}}

" {{{ GUndo
" {{{ gundo_preview_bottom
" Force the preview window below current windows instead of below the graph.
" This gives the preview window more space to show the unified diff.
let g:gundo_preview_bottom=1
"}}}

" {{{ gundo_right
" Set this to 1 to make the Gundo graph (and preview) open on the right side
" instead of the left.
let g:gundo_right=1
"}}}
"}}}

" {{{ LaTeX
" If the first line of a *.tex file has the form
"	%&<format>
" then this determined the file type: plaintex (for plain TeX), context (for
" ConTeXt), or tex (for LaTeX). Otherwise, the file is searched for keywords
" to choose context or tex. If no keywords are found, it defaults to plaintex.
" You can change the default by defining the variable g:tex_flavor to the
" format (not the file type) you use most. Use one of these:
"	let g:tex_flavor="plain"
"	let g:tex_flavor="context"
"	let g:tex_flavor="latex"
" Currently no other formats are recognized.
let g:tex_flavor='latex'
"}}}

"{{{ LaTeX-Suite
" {{{ Tex_DefaultTargetFormat
" Use this setting to choose the default target format. For example, setting
" this to pdf makes LaTeX-Suite compile a pdf file when you press \ll and fire
" up the pdf viewer on pressing \lv. Make sure that a rules for compiling and
" viewing have been defined for this target format as described here [ls_a_dx]
" and here [ls_a_dF].
let g:Tex_DefaultTargetFormat='pdf'
"}}}

" {{{ ViewRule
" Here <format> refers to a format such as dvi, ps, etc. This variable defines
" the program which will be called to display a file of that format.
"
" By default, LaTeX-Suite defines viewer programs for viewing DVI, PS and PDF
" formats as follows:
"                       Windows       Unix~
" g:Tex_ViewRule_dvi    'yap -1'      'xdvi'
" g:Tex_ViewRule_ps     'gsview32'    'ghostview'
" g:Tex_ViewRule_pdf    'AcroRd32'    'xpdf'
"
" For Macintosh systems, these strings are left empty by default. This lets the
" system pick the program for each format. If you define these variables for
" Mac, the system choice will be over-ridden.
"
" LaTeX-Suite appends file.format to the above settings while calling the
" external programs. For example, with
"   let g:Tex_ViewRule_dvi='yap -1'
" yap is called as
"   !start yap -1 file.dvi
" from within Vim. (The initial start is used on Windows platforms is to make
" yap start as a separate process.) If you find the way LaTeX-Suite constructs
" the command line too restrictive, you can use the Tex_ViewRuleComplete_format
" [ls_a_dG] setting for more complete control on how the command line is
" constructed while calling the external program for viewing.
"
" NOTE: For windows, you will need to set the $PATH variable to include the
"       paths to yap, AcroRd32, gsview32 and any other programs. See your system
"       documentation for how to do this.
"
" NOTE: Default Viewing Format
"       ----------------------
" To change the default format for viewing files, set the
" g:Tex_DefaultTargetFormat [ls_a_dw] variable.
let g:Tex_ViewRule_pdf='zathura'
"}}}
"}}}

" {{{ NetRW
" {{{ netrw_browse_split
" when browsing, <cr> will open the file by:
"    0: re-using the same window
"    1: horizontally splitting the window first
"    2: vertically splitting the window first
"    3: open file in new tab
"    4: act like "P" (ie. open previous window) Note that g:netrw_preview may
"       be used to get vertical splitting instead of horizontal splitting.
let g:netrw_browse_split = 3
" }}}

" {{{ netrw_liststyle
" Set the default listing style:
"   0: thin listing (one file per line)
"   1: long listing (one file per line with time stamp information and file
"      size)
"   2: wide listing (multiple files in columns)
"   3: tree style listing
let g:netrw_liststyle = 3
"}}}

" {{{ netrw_list_hide
" comma separated pattern list for hiding files Patterns are regular
" expressions.
let g:netrw_list_hide= '.*\.swp$'
"}}}

" {{{ netrw_maxfilenamelen
" 32 by default, selected so as to make long listings fit on 80 column displays.
" If your screen is wider, and you have file or directory names longer than 32
" bytes, you may set this option to keep listings columnar.
let g:netrw_maxfilenamelen = 80
"}}}

" {{{ netrw_special_syntax
" If true, then certain files will be shown in special syntax in the browser:
"   netrwBak     : *.bak
"   netrwCompress: *.gz *.bz2 *.Z *.zip
"   netrwData    : *.dat
"   netrwHdr     : *.h
"   netrwLib     : *.a *.so *.lib *.dll
"   netrwMakefile: [mM]akefile *.mak
"   netrwObj     : *.o *.obj
"   netrwTags    : tags ANmenu ANtags
"   netrwTilde   : *
"   netrwTmp     : tmp* *tmp
"
" These syntax highlighting groups are linked to Folded or DiffChange by default
" (see hl-Folded and hl-DiffChange), but one may put lines like
"   hi link netrwCompress Visual
" into one's <.vimrc> to use one's own preferences.
let g:netrw_special_syntax = 1
"}}}

" {{{ netrw_timefmt
" specify format string to vim's strftime().
" The default, "%c", is "the preferred date and time representation for the
" current locale" according to my manpage entry for strftime(); however, not all
" are satisfied with it.
let g:netrw_timefmt = "%Y-%m-%d"
"}}}
"}}}

" {{{ Supertab
" {{{ SuperTabDefaultCompletionType
" Used to set the default completion type. There is no need to escape this value
" as that will be done for you when the type is set.
let g:SuperTabDefaultCompletionType="context"
"}}}
"}}}

" {{{ Syntastic
" {{{ syntastic_auto_loc_list
" Use this option to tell syntastic to automatically open and/or close the
" location-list (see syntastic-error-window).
"
" When set to 0 the error window will not be opened or closed automatically. >
"     let g:syntastic_auto_loc_list=0
" When set to 1 the error window will be automatically opened when errors are
" detected, and closed when none are detected.
"     let g:syntastic_auto_loc_list=1
" When set to 2 the error window will be automatically closed when no errors are
" detected, but not opened automatically.
"     let g:syntastic_auto_loc_list=2
let g:syntastic_auto_loc_list=1
"}}}
" {{{ Syntax Checker
" {{{ HTML
" {{{ Tidy
let g:syntastic_html_tidy_ignore_errors=[
            \ "escaping malformed URI reference"
            \ ]
"}}}
"}}}
"}}}
"}}}

" {{{ TagBar
" {{{ toggle display
nnoremap <silent> <C-w><C-t> :TagbarToggle<CR>
"}}}

" {{{ tagbar_width
" Width of the Tagbar window in characters.
let g:tagbar_width=60
"}}}

" {{{ tagbar_autofocus
" If you set this option the cursor will move to the Tagbar window when it is
" opened.
let g:tagbar_autofocus=1
" }}}

" {{{ tagbar_show_linenumbers
" Whether line numbers should be shown in the Tagbar window.
" Possible values are:
"   0: Don't show any line numbers.
"   1: Show absolute line numbers.
"   2: Show relative line numbers.
"  -1: Use the global line number settings.
let g:tagbar_show_linenumbers=-1
"}}}

" {{{ tagbar_foldlevel
" The initial foldlevel for folds in the Tagbar window. Folds with a level
" higher than this number will be closed.
let g:tagbar_foldlevel=2
"}}}

" {{{ tagbar_autoshowtag
" If this variable is set and the current tag is inside of a closed fold then
" the folds will be opened as much as needed for the tag to be visible so it can
" be highlighted. If it is not set then the folds won't be opened and the parent
" tag will be highlighted instead. You can use the :TagbarShowTag command to
" open the folds manually.
let g:tagbar_autoshowtag=1
"}}}

" {{{ tagbar_type_sql
let g:tagbar_type_sql={
            \    'replace'   : 1,
            \    'ctagstype' : 'sql',
            \    'sort'      : 0,
            \    'kinds'     : [
            \        'P:Packages',
            \        'd:Prototypes',
            \        'c:Cursors',
            \        'f:Functions',
            \        'F:Record fields:1:0',
            \        'L:Block label',
            \        'p:Procedures',
            \        's:Subtypes',
            \        't:Tables',
            \        'T:Triggers',
            \        'v:Variables',
            \        'i:Indexes',
            \        'e:Events',
            \        'U:Publications',
            \        'R:Services',
            \        'D:Domains',
            \        'V:Views',
            \        'n:Synonyms',
            \    ],
            \}
"}}}

" {{{ tagbar_type_tex
let g:tagbar_type_tex={
            \    'ctagstype' : 'latex',
            \    'sort'      : 0,
            \    'kinds'     : [
            \        's:Sections',
            \        'g:Graphics:0:0',
            \        'l:Labels',
            \        'r:Refs:1:0',
            \        'p:Pagerefs:1:0'
            \    ],
            \}
"}}}

" {{{ tagbar_type_sh
let g:tagbar_type_sh={
            \    'ctagstype' : 'sh',
            \    'sort'      : 0,
            \    'kinds'     : [
            \        'f:Functions',
            \        'a:Alias',
            \        'v:Variable',
            \        'o:Options',
            \    ],
            \}
"}}}

" {{{ tagbar_type_sshconfig
let g:tagbar_type_sshconfig={
            \    'ctagstype' : 'sshconfig',
            \    'sort'      : 0,
            \    'kinds'     : [
            \        'h:Host',
            \    ],
            \}
"}}}

" {{{ tagbar_type_html
let g:tagbar_type_html={
            \    'ctagstype' : 'html',
            \    'sort'      : 0,
            \    'kinds'     : [
            \        'a:named Anchor',
            \        'f:Javascript function'
            \    ],
            \}
"}}}

" {{{ tagbar_type_javascript
let g:tagbar_type_javascript={
            \    'ctagstype' : 'Javascript',
            \    'sort'      : 0,
            \    'kinds'     : [
            \        'f:Functions',
            \        'c:Classes',
            \        'm:Methods',
            \        'p:Properties',
            \        'v:Global:variables',
            \        'r:Object',
            \        'r:Function',
            \        'r:Function',
            \        'r:Array',
            \        'r:String',
            \        'r:String',
            \    ],
            \}
"}}}
"}}}

" {{{ TagBar PHP-CTags
" {{{ tagbar_phpctags_bin
" Location of phpctags.
let g:tagbar_phpctags_bin='~/.vim/bundle/PHP-CTags/bin/phpctags'
"}}}

" {{{ tagbar_phpctags_memory_limit
" The amount of memory that phpctags can use can be configured.
let g:tagbar_phpctags_memory_limit = '1G'
"}}}
"}}}

" {{{ Unite
" {{{ unite_source_history_yank_enable
" If defined and not 0, unite enables unite-source-history/yank.
let g:unite_source_history_yank_enable = 1
"}}}

" {{{ mappings
nnoremap <C-p> :Unite file_rec/async<cr>
nnoremap <LocalLeader>/ :Unite grep:.<cr>
nnoremap <LocalLeader>b :Unite -quick-match buffer<cr>
nnoremap <LocalLeader>s :Unite session<cr>
nnoremap <LocalLeader>y :Unite history/yank<cr>
"}}}
"}}}

" {{{ Vimfiler
" {{{ vimfiler_as_default_explorer
" If this variable is true, Vim use vimfiler as file manager instead of netrw.
let g:vimfiler_as_default_explorer = 1
"}}}

" {{{ vimfiler_edit_action
" This variable controls vimfiler edit action in |unite|.
let g:vimfiler_edit_action = 'tabopen'
"}}}

" {{{ vimfiler_safe_mode_by_default
" This variable controls vimfiler enter safe mode by default. In safe mode,
" dangerous command is disabled.
let vimfiler_safe_mode_by_default = 1
"}}}

" {{{ vimfiler_enable_auto_cd
" This variable controls whether vimfiler change Vim current directory using
" g:unite_kind_openable_lcd_command automatically.
let g:vimfiler_enable_auto_cd = 1
"}}}

" {{{ mappings
nnoremap <LocalLeader>f :VimFilerTab -toggle <cr>
"}}}
"}}}

" vim: filetype=vim textwidth=80 foldmethod=marker
