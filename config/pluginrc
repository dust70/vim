" {{{ dein.vim
" install:
" curl https://raw.githubusercontent.com/Shougo/dein.vim/master/bin/installer.sh > installer.sh
" sh ./installer.sh ~/.cache/dein
let g:deinpath=escape(expand("~/.cache/dein"), " ")
let g:deinvimpath=escape(expand(deinpath . "/repos/github.com/Shougo/dein.vim"), " ")

if &compatible
    set nocompatible
endif

let &runtimepath.="," . deinvimpath

if dein#load_state(deinpath)
    call dein#begin(deinpath)

    " Let dein manage dein
    call dein#add(deinvimpath)

    " Add or remove your plugins here:
    call dein#add("janko-m/vim-test")
    call dein#add("mhinz/vim-signify")
    call dein#add("rking/vim-detailed")
    call dein#add("Shougo/denite.nvim")
    call dein#add("Shougo/deoplete.nvim")
    call dein#add("Shougo/neoinclude.vim")
    call dein#add("tpope/vim-commentary")
    call dein#add("tpope/vim-fugitive")
    call dein#add("tpope/vim-sensible")
    call dein#add("tpope/vim-surround")
    call dein#add("vim-airline/vim-airline")
    call dein#add("vim-syntastic/syntastic")

    call dein#end()

    call dein#save_state()
endif

" If you want to install not installed plugins on startup.
if dein#check_install()
    call dein#install()
endif

unlet deinvimpath
unlet deinpath
"}}}

" {{{ Bufexplorer disabled
let g:bufexplorer_version=1
"}}}

" {{{ MiniBufExpl disabled
let g:loaded_minibufexplorer=1
"}}}

" {{{ Airline
" {{{ tabline
" enable/disable enhanced tabline.
let g:airline#extensions#tabline#enabled=1

" enable/disable displaying buffers with a single tab.
let g:airline#extensions#tabline#show_buffers=1

" configure how numbers are calculated in tab mode.
let g:airline#extensions#tabline#tab_nr_type=1

" enable/disable displaying tab number in tabs mode.
let g:airline#extensions#tabline#show_tab_nr=1
"}}}
"}}}

" {{{ denite
" ctrlp
nnoremap <silent> <C-p> :<C-u>Denite file_rec<CR>
"}}}

" {{{ FuGITive
" {{{ mappings
nmap <silent> <leader>ga :Gwrite<cr>
"}}}
"}}}

" {{{ LaTeX
" {{{ tex_flavor
" If the first line of a *.tex file has the form
"	%&<format>
" then this determined the file type: plaintex (for plain TeX), context (for
" ConTeXt), or tex (for LaTeX). Otherwise, the file is searched for keywords
" to choose context or tex. If no keywords are found, it defaults to plaintex.
" You can change the default by defining the variable g:tex_flavor to the
" format (not the file type) you use most. Use one of these:
"	let g:tex_flavor="plain"
"	let g:tex_flavor="context"
"	let g:tex_flavor="latex"
" Currently no other formats are recognized.
let g:tex_flavor='latex'
"}}}
"}}}

" {{{ LaTeX-Suite
" {{{ Tex_DefaultTargetFormat
" Use this setting to choose the default target format. For example, setting
" this to pdf makes LaTeX-Suite compile a pdf file when you press \ll and fire
" up the pdf viewer on pressing \lv. Make sure that a rules for compiling and
" viewing have been defined for this target format as described here [ls_a_dx]
" and here [ls_a_dF].
let g:Tex_DefaultTargetFormat='pdf'
"}}}
"}}}

" {{{ Syntastic
" {{{ syntastic_check_on_wq
" Normally syntastic runs syntax checks whenever buffers are written to disk. If
" you want to skip these checks when you issue |:wq|, |:x|, and |:ZZ|, set this
" variable to 0.
if ! &diff
    let g:syntastic_check_on_wq=0
endif
"}}}

" {{{ syntastic_aggregate_errors
" When enabled, syntastic runs all checkers that apply to the current filetype,
" then aggregates errors found by all checkers and displays them. When disabled,
" syntastic runs each checker in turn, and stops to display the results the
" first time a checker finds any errors.
let g:syntastic_aggregate_errors=1
"}}}

" {{{ syntastic_auto_loc_list
" Use this option to tell syntastic to automatically open and/or close the
" location-list (see syntastic-error-window).
" When set to 0 the error window will not be opened or closed automatically. >
"     let g:syntastic_auto_loc_list=0
" When set to 1 the error window will be automatically opened when errors are
" detected, and closed when none are detected.
"     let g:syntastic_auto_loc_list=1
" When set to 2 the error window will be automatically closed when no errors are
" detected, but not opened automatically.
"     let g:syntastic_auto_loc_list=2
let g:syntastic_auto_loc_list=1
"}}}

" {{{ syntastic_filetype_map
" Use this option to map non-standard filetypes to standard ones. Corresponding
" checkers are mapped accordingly, which allows syntastic to check files with
" non-standard filetypes
let g:syntastic_filetype_map={
	    \ 'latex': 'tex',
	    \ }
"}}}

" {{{ syntastic_mode_map
" Use this option to fine tune when automatic syntax checking is done (or not
" done).
let g:syntastic_mode_map={
	    \ 'mode': 'active',
	    \ 'active_filetypes': [
	    \    'php',
	    \    'python',
	    \    'ruby'
	    \ ],
	    \ 'passive_filetypes': [
	    \    'html',
	    \    'puppet'
	    \ ]}
"}}}

" {{{ Syntax Checker
" {{{ HTML
let g:syntastic_html_checkers=[
	    \ 'tidy',
	    \ 'jshint'
	    \ ]
"}}}

" {{{ PHP
" {{{ syntastic_<filetype>_<checker>_exec
if executable('./bin/phpcs')
    let g:syntastic_php_phpcs_exec='./bin/phpcs'
endif
if executable('./bin/phpmd')
    let g:syntastic_php_phpmd_exec='./bin/phpmd'
endif
"}}}

" {{{ syntastic_php_phpcs_args
let g:syntastic_php_phpcs_args="--standard=zend -l --extensions=php --tab-width=" . &tabstop
"}}}

let g:syntastic_php_checkers=[
	    \ 'php',
	    \ 'phplint',
	    \ 'phpmd',
	    \ 'phpcs'
	    \ ]
"}}}

" {{{ Puppet
" puppet check
let g:syntastic_puppet_checkers=[
	    \ 'puppet',
	    \ 'puppetlint'
	    \ ]

"}}}

" {{{ Python
" python check
let g:syntastic_python_checkers=[
	    \ 'python',
	    \ 'flake8',
	    \ 'pep8',
	    \ 'pyflakes',
	    \ 'pylint'
	    \ ]
"}}}

" {{{ VIm
" vim check
let g:syntastic_vim_checkers=[
	    \ 'vim',
	    \ 'vimlint'
	    \ ]
"}}}
"}}}
"}}}

" vim: filetype=vim textwidth=80 foldmethod=marker
