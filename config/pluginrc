" {{{ NeoBundle
" {{{ g:neobundle#install_max_processes
" The max number of processes used for neobundle/install source asynchronous
" update.
let g:neobundle#install_max_processes = 1
"}}}

let g:bundlePath=split(&runtimepath, ',')[0] . '/bundle'
let g:pathToNeoBundle=expand(bundlePath).'/NeoBundle'
if filereadable(pathToNeoBundle.'/plugin/neobundle.vim')
    " {{{ initialize
    if has('vim_starting')
        set nocompatible
        let &runtimepath.=','.expand(pathToNeoBundle)
    endif
    "}}}

    " {{{ bundle path and call NeoBundle
    call neobundle#begin(expand(bundlePath))
    "}}}

    " {{{ Bundles
    " {{{ Neobundle
    NeoBundleFetch 'Shougo/neobundle.vim', {
                \     'directory' : 'NeoBundle',
                \     'name'      : 'NeoBundle',
                \}
    "}}}

    " {{{ bundles needed by other bundles
    NeoBundle 'xolox/vim-misc', {
                \     'directory' : 'Misc',
                \     'name'      : 'Misc',
                \}
    NeoBundle 'Shougo/vimproc.vim', {
                \     'directory' : 'VimProc',
                \     'name'      : 'VimProc',
                \ 'build' : {
                \     'windows' : 'vimproc_updcmd',
                \     'cygwin'  : 'make -f make_cygwin.mak',
                \     'mac'     : 'make -f make_mac.mak',
                \     'unix'    : 'make -f make_unix.mak',
                \     }
                \}
    NeoBundle 'Shougo/vimshell.vim', {
                \     'directory' : 'Shell',
                \     'name'      : 'Shell',
                \}
    "}}}

    " {{{ Plugins
    NeoBundle 'bling/vim-airline', {
                \     'directory' : 'Airline',
                \     'name'      : 'Airline',
                \}
    NeoBundle 'vim-scripts/Align', {
                \     'directory' : 'Align',
                \     'name'      : 'Align',
                \}
    NeoBundle 'Chiel92/vim-autoformat', {
                \     'directory' : 'AutoFormat',
                \     'name'      : 'AutoFormat'
                \}
    NeoBundle 'jiangmiao/auto-pairs', {
                \     'directory' : 'AutoPairs',
                \     'name'      : 'AutoPairs',
                \}
    NeoBundle 'mattn/calendar-vim', {
                \     'directory' : 'Calendar',
                \     'name'      : 'Calendar',
                \}
    NeoBundle 'vim-scripts/closetag.vim', {
                \     'directory' : 'CloseTag',
                \     'name'      : 'CloseTag',
                \}
    NeoBundle 'flazz/vim-colorschemes', {
                \     'directory' : 'Colorschemes',
                \     'name'      : 'Colorschemes',
                \}
    NeoBundle 'http://conque.googlecode.com/svn/trunk/', {
                \     'directory' : 'Conque',
                \     'name'      : 'Conque',
                \}
    NeoBundle 'chrisbra/csv.vim', {
                \     'directory' : 'CSV',
                \     'name'      : 'CSV',
                \}
    NeoBundle 'rking/vim-detailed', {
                \     'directory' : 'Detailed',
                \     'name'      : 'Detailed',
                \}
    NeoBundle 'tpope/vim-dispatch', {
                \     'directory' : 'Dispatch',
                \     'name'      : 'Dispatch',
                \}
    NeoBundle 'xolox/vim-easytags', {
                \     'directory' : 'Easytag',
                \     'name'      : 'Easytag',
                \}
    NeoBundle 'vim-scripts/EnhCommentify.vim', {
                \     'directory' : 'EnhancedCommentify',
                \     'name'      : 'EnhancedCommentify',
                \}
    NeoBundle 'tpope/vim-fugitive', {
                \     'directory' : 'FuGITive',
                \     'name'      : 'FuGITive',
                \}
    NeoBundle 'sjl/gundo.vim.git', {
                \     'directory' : 'Gundo',
                \     'name'      : 'Gundo',
                \}
    NeoBundle 'othree/html5.vim', {
                \     'directory' : 'HTML5',
                \     'name'      : 'HTML5',
                \}
    NeoBundle 'git://git.code.sf.net/p/vim-latex/vim-latex', {
                \     'directory' : 'LaTeX',
                \     'name'      : 'LaTeX',
                \}
    NeoBundle 'groenewege/vim-less', {
                \     'directory' : 'Less',
                \     'name'      : 'Less',
                \}
    NeoBundle 'gregsexton/MatchTag', {
                \     'directory' : 'MatchTag',
                \     'name'      : 'MatchTag',
                \}
    NeoBundle 'Shougo/neocomplete', {
                \     'directory'   : 'NeoComplete',
                \     'name'        : 'NeoComplete',
                \ 'disabled'    : !has('lua'),
                \ 'vim_version' : '7.3.885',
                \}
    NeoBundle 'Shougo/neomru.vim', {
                \     'directory' : 'NeoMRU',
                \     'name'      : 'NeoMRU',
                \}
    NeoBundle 'Shougo/neosnippet', {
                \     'directory' : 'NeoSnippet',
                \     'name'      : 'NeoSnippet',
                \}
    NeoBundle 'Shougo/neosnippet-snippets', {
                \     'directory' : 'NeoSnippet-Snippets',
                \     'name'      : 'NeoSnippet-Snippets',
                \}
    NeoBundle 'vimoutliner/vimoutliner', {
                \     'directory' : 'Outliner',
                \     'name'      : 'Outliner'
                \}
    NeoBundle 'rkitover/vimpager', {
                \     'directory' : 'Pager',
                \     'name'      : 'Pager',
                \}
    NeoBundle 'shawncplus/phpcomplete.vim', {
                \     'directory' : 'PHP-Complete',
                \     'name'      : 'PHP-Complete',
                \}
    NeoBundle 'vim-php/tagbar-phpctags.vim', {
                \     'directory' : 'PHP-CTags',
                \     'name'      : 'PHP-CTags',
                \ 'build'     : {
                \     'cygwin'  : 'make',
                \     'mac'     : 'make',
                \     'unix'    : 'make',
                \     'windows' : 'make',
                \     },
                \}
    NeoBundle 'nishigori/vim-php-dictionary', {
                \     'directory' : 'PHP-Dictionary',
                \     'name'      : 'PHP-Dictionary',
                \}
    NeoBundle 'QafooLabs/php-refactoring-browser', {
                \     'directory' : 'PHP-Refactoring-Browser',
                \     'name'      : 'PHP-Refactoring-Browser',
                \ 'build'     : {
                \     'cygwin'  : '',
                \     'mac'     : 'curl -sS https://getcomposer.org/installer | php && php composer.phar install',
                \     'unix'    : 'curl -sS https://getcomposer.org/installer | php && php composer.phar install',
                \     'windows' : '',
                \     },
                \}
    NeoBundle 'vim-php/vim-php-refactoring', {
                \     'directory' : 'PHP-Refactoring',
                \     'name'      : 'PHP-Refactoring',
                \}
    NeoBundle 'jmcomets/vim-pony', {
                \     'directory' : 'Pony',
                \     'name'      : 'Pony',
                \}
    NeoBundle 'rodjek/vim-puppet', {
                \     'directory' : 'Puppet',
                \     'name'      : 'Puppet',
                \}
    NeoBundle 'luochen1990/rainbow', {
                \     'directory' : 'Rainbow_Parentheses_Improved',
                \     'name'      : 'Rainbow Parentheses Improved',
                \}
    NeoBundle 'ciaranm/securemodelines', {
                \     'directory' : 'SecureModelines',
                \     'name'      : 'SecureModelines',
                \}
    NeoBundle 'honza/vim-snippets', {
                \     'directory' : 'Snippets',
                \     'name'      : 'Snippets',
                \}
    NeoBundle 'ervandew/supertab', {
                \     'directory' : 'Supertab',
                \     'name'      : 'Supertab',
                \}
    NeoBundle 'tpope/vim-surround', {
                \     'directory' : 'Surround',
                \     'name'      : 'Surround',
                \}
    NeoBundle 'sjl/splice.vim', {
                \     'directory' : 'Splice',
                \     'name'      : 'Splice',
                \}
    NeoBundle 'scrooloose/syntastic', {
                \     'directory' : 'Syntastic',
                \     'name'      : 'Syntastic',
                \}
    NeoBundle 'majutsushi/tagbar', {
                \     'directory' : 'Tagbar',
                \     'name'      : 'Tagbar',
                \}
    NeoBundle 'zaiste/tmux.vim', {
                \     'directory' : 'TMux-Syntax',
                \     'name'      : 'TMux-Syntax',
                \}
    NeoBundle 'Shougo/unite.vim', {
                \     'directory' : 'Unite',
                \     'name'      : 'Unite',
                \}
    NeoBundle 'Shougo/unite-build', {
                \     'directory' : 'Unite-Build',
                \     'name'      : 'Unite-Build',
                \}
    NeoBundle 'Shougo/unite-session', {
                \     'directory' : 'Unit-Session',
                \     'name'      : 'Unit-Session',
                \}
    NeoBundle 'Shougo/neossh.vim', {
                \     'directory' : 'Unit-SSH',
                \     'name'      : 'Unit-SSH',
                \}
    NeoBundle 'joonty/vdebug', {
                \     'directory' : 'VDebug',
                \     'name'      : 'VDebug'
                \}
    NeoBundle 'Shougo/vimfiler.vim', {
                \     'directory' : 'Vimfiler',
                \     'name'      : 'Vimfiler',
                \}
    NeoBundle 'jmcantrell/vim-virtualenv', {
                \     'directory' : 'Virtualenv',
                \     'name'      : 'Virtualenv'
                \}
    "}}}
    "}}}

    call neobundle#end()

    " {{{ NeoBundleCheck
    " Check plugins installation. If plugins are not installed, it will execute
    " :NeoBundleInstall automatically. This command also check
    " enabledocumentation directories and will execute :NeoBundleDocs
    " automaticallyally.
    NeoBundleCheck
    "}}}

    " {{{ UpdateNeobundle()
    function! UpdateNeobundle()
        NeoBundleCheck
        NeoBundleCheckUpdate
        NeoBundleClean
        NeoBundleGC
        NeoBundleDocs
    endfunction
    command! UpdateNeobundle call UpdateNeobundle()
    "}}}
endif
unlet pathToNeoBundle
unlet bundlePath
"}}}

" {{{ Bufexplrorer disabled
let g:bufexplorer_version = 1
" }}}

" {{{ MiniBufExpl disabled
let g:loaded_minibufexplorer = 1
" }}}

" {{{ Airline
" {{{ tabline
" enable/disable enhanced tabline.
let g:airline#extensions#tabline#enabled = 1

" enable/disable displaying buffers with a single tab.
let g:airline#extensions#tabline#show_buffers = 1

" enable/disable displaying tab number in tabs mode.
let g:airline#extensions#tabline#show_tab_nr = 1
"}}}
"}}}

" {{{ AutoFormat
nnoremap <silent> ,bf :Autoformat<cr><cr>

let g:formatprg_php = "astyle"
let g:formatprg_args_php = "--style=linux -cdHs4"
"}}}

" {{{ Calendar
" if you want to keep focus when goto next or prev calendar, add the following
" to your .vimrc:
let g:calendar_focus_today = 1

" if you want the week to start with monday, add below to your .vimrc:
"   let g:calendar_monday = 1
" (You don't have to to change g:calendar_wruler!)
let g:calendar_monday = 1
"}}}

" {{{ ConqueTerm
" {{{ ConqueTerm_FastMode
" Disable features which could make Conque run slowly. This includes most
" terminal colors and some unicode support. Set this to 1 to enable fast mode.
let g:ConqueTerm_FastMode = 1
"}}}

" {{{ ConqueTerm_InsertOnEnter
" If set to 1 then you will automatically go into insert mode when you enter the
" buffer. This diverges from normal Vim behavior. If 0 you will still be in
" normal mode.
let g:ConqueTerm_InsertOnEnter = 1
"}}}

" {{{ ConqueTerm_CloseOnEnd
" If you want your terminal buffer to be closed and permanently deleted when the
" program running inside of it exits, set this option to 1. Otherwise the buffer
" will become a simple text buffer after the program exits, and you can edit the
" program output in insert mode.
let g:ConqueTerm_CloseOnEnd = 1
"}}}
"}}}

" {{{ Dispatch
" {{{ dispatch_compilers
" If you need more control, g:dispatch_compilers can be set to a dictionary with
" commands for keys and compiler plugins for values. Use an empty value to skip
" the matched string and try again with the rest of the command.
let g:dispatch_compilers = {
            \ 'php'    : './bin/phpunit --verbose',
            \ 'python' : './env/bin/python manage.py test',
            \ }
"}}}

" {{{ key mappings
nnoremap <silent> ,d :Dispatch<cr>
"}}}
"}}}

" {{{ Easytag
let g:easytags_autorecurse = 1
let g:easytags_by_filetype = vimfiles . "/tags"
let g:easytags_dynamic_files = 1
let g:easytags_events = ['BufWritePost', 'FileWritePost']
let g:easytags_include_members = 1
let g:easytags_resolve_links = 1
let g:easytags_suppress_ctags_warning = 1
let g:easytags_updatetime_min = 3600000
"}}}

" {{{ EnhancedCommentify
" With this option set, the script tries to figure out which filetype to use
" for every block by using the synID of the block. This improves handling of
" embedded languages eg. CSS in HTML, Perl in VimL... But be aware, that this
" feature currently relies on a special form of the names of the syntax items.
" So it might not work with every syntax file (see EnhComm-Bugs). It also
" calls synID only once for every block! So the first line is significant. Be
" aware, that "cross" commenting might cause problems.
let g:EnhCommentifyUseSyntax = 'Yes'
"}}}

" {{{ FuGITive
nnoremap <silent> ,gc :Gcommit<cr>
nnoremap <silent> ,gf :Gfetch<cr>
nnoremap <silent> ,gg :Ggrep<space>
nnoremap <silent> ,gm :Gmove<space>
nnoremap <silent> ,gp :Gpush<cr>
nnoremap <silent> ,gr :Gremove<space>
nnoremap <silent> ,gs :Gstatus<cr>
nnoremap <silent> ,gv :Gdiff<cr>
"}}}

" {{{ GUndo
" {{{ mappings
nnoremap <silent> ,u :GundoToggle<cr>
"}}}

" {{{ gundo_preview_bottom
" Force the preview window below current windows instead of below the graph.
" This gives the preview window more space to show the unified diff.
let g:gundo_preview_bottom = 1
"}}}

" {{{ gundo_right
" Set this to 1 to make the Gundo graph (and preview) open on the right side
" instead of the left.
let g:gundo_right = 1
"}}}
"}}}

" {{{ LaTeX
" {{{ tex_flavor
" If the first line of a *.tex file has the form
"	%&<format>
" then this determined the file type: plaintex (for plain TeX), context (for
" ConTeXt), or tex (for LaTeX). Otherwise, the file is searched for keywords
" to choose context or tex. If no keywords are found, it defaults to plaintex.
" You can change the default by defining the variable g:tex_flavor to the
" format (not the file type) you use most. Use one of these:
"	let g:tex_flavor = "plain"
"	let g:tex_flavor = "context"
"	let g:tex_flavor = "latex"
" Currently no other formats are recognized.
let g:tex_flavor = 'latex'
"}}}
"}}}

"{{{ LaTeX-Suite
" {{{ Tex_DefaultTargetFormat
" Use this setting to choose the default target format. For example, setting
" this to pdf makes LaTeX-Suite compile a pdf file when you press \ll and fire
" up the pdf viewer on pressing \lv. Make sure that a rules for compiling and
" viewing have been defined for this target format as described here [ls_a_dx]
" and here [ls_a_dF].
let g:Tex_DefaultTargetFormat = 'pdf'
"}}}

" {{{ ViewRule
" Here <format> refers to a format such as dvi, ps, etc. This variable defines
" the program which will be called to display a file of that format.
"
" By default, LaTeX-Suite defines viewer programs for viewing DVI, PS and PDF
" formats as follows:
"                       Windows       Unix~
" g:Tex_ViewRule_dvi    'yap -1'      'xdvi'
" g:Tex_ViewRule_ps     'gsview32'    'ghostview'
" g:Tex_ViewRule_pdf    'AcroRd32'    'xpdf'
"
" For Macintosh systems, these strings are left empty by default. This lets the
" system pick the program for each format. If you define these variables for
" Mac, the system choice will be over-ridden.
"
" LaTeX-Suite appends file.format to the above settings while calling the
" external programs. For example, with
"   let g:Tex_ViewRule_dvi = 'yap -1'
" yap is called as
"   !start yap -1 file.dvi
" from within Vim. (The initial start is used on Windows platforms is to make
" yap start as a separate process.) If you find the way LaTeX-Suite constructs
" the command line too restrictive, you can use the Tex_ViewRuleComplete_format
" [ls_a_dG] setting for more complete control on how the command line is
" constructed while calling the external program for viewing.
"
" NOTE: For windows, you will need to set the $PATH variable to include the
"       paths to yap, AcroRd32, gsview32 and any other programs. See your system
"       documentation for how to do this.
"
" NOTE: Default Viewing Format
"       ----------------------
" To change the default format for viewing files, set the
" g:Tex_DefaultTargetFormat [ls_a_dw] variable.
let g:Tex_ViewRule_pdf = 'zathura'
"}}}
"}}}

" {{{ NeoComplete
" {{{ neocomplete#delimiter_patterns
" This variable appoints a delimiter pattern to smart complete a function. This
" is appointed in string list every file type.
" NOTE: This string is not regular expression.
if !exists('g:neocomplete#delimiter_patterns')
    let g:neocomplete#delimiter_patterns= {}
endif
let g:neocomplete#delimiter_patterns = {
            \ 'cpp'  : ['::'],
            \ 'java' : ['.'],
            \ 'php'  : ['->'],
            \ 'vim'  : ['#'],
            \}
"}}}

" {{{ neocomplete#sources
" It is a dictionary to decide use source names. The key is filetype and the
" value is source names list. If the key is "_", the value will be used for
" default filetypes. For example, you can disable some sources in C++ filetype.
" If the value is "_", it will load all sources.
let g:neocomplete#sources = {
            \ '_'    : ['buffer', 'dictionary'],
            \ 'cpp'  : ['buffer', 'dictionary', 'include'],
            \ 'html' : ['buffer', 'dictionary'],
            \ 'php'  : ['buffer', 'dictionary', 'include']
            \}
"}}}

" {{{ neocomplete#release_cache_time
" This variable defines time of automatic released cache by a second unit.
let g:neocomplete#release_cache_time = 3600
"}}}

" {{{ neocomplete#ignore_composite_filetypes
" It is a dictionary to ignore composite file type. The dictionary's key is
" composite filetype and value is filetype.
let g:neocomplete#ignore_composite_filetypes = {
            \}
"}}}

" {{{ neocomplete#sources#buffer#cache_limit_size
" This variable sets file size to make a cache of a file. If open file is bigger
" than this size, neocomplete does not make a cache.
let g:neocomplete#sources#buffer#cache_limit_size = 50000000
"}}}
"}}}

" {{{ NeoSnippet
" {{{ key mappings and recommended options
imap <silent> <C-k> <Plug>(neosnippet_expand_or_jump)
smap <silent> <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <silent> <C-k> <Plug>(neosnippet_expand_target)
xmap <silent> <C-l> <Plug>(neosnippet_start_unite_snippet_target)

" For snippet_complete marker.
if has('conceal')
    set conceallevel=2
    set concealcursor=i
endif
"}}}

" {{{ neosnippet#snippets_directory
" This variable appoints a path to user-defined snippet files. You can set
" multiple values in comma-separated string or list. Non existing directories
" are ignored.
let g:neosnippet#snippets_directory = "" .
            \ expand(vimfiles."/snippets").",".
            \ expand(vimfiles."/bundle/NeoSnippet-Snippets/neosnippets").",".
            \ expand(vimfiles."/bundle/Snippets/snippets")
"}}}

" {{{ neosnippet#scope_aliases
" It is a dictionary that associating certain filetypes with other snippet
" files. The key is filetype, and the value is comma separated snippet filenames
" excluded extensions. It works like g:snipMate.scope_aliases.
let g:neosnippet#scope_aliases = {
            \ 'html'   : 'xhtml, html, css, javascript',
            \ 'php'    : 'php, sql',
            \ 'python' : 'python',
            \}
"}}}

" {{{ neosnippet#data_directory
" Specifies directory for neosnippet cache. If the directory doesn't exist the
" directory will be automatically generated.
let g:neosnippet#data_directory = expand(vimfiles."/tmp")
"}}}
"}}}

" {{{ PHP-Refactoring
let g:php_refactor_command =
            \ 'php '.vimfiles.'/bundle/PHP-Refactoring-Browser/src/bin/refactor'
"}}}

" {{{ Rainbow Parentheses Improved
" {{{ rainbow_active
let g:rainbow_active = 1
"}}}

" {{{ rainbow_conf
let g:rainbow_conf = {
            \ 'guifgs'      : ['lightgray', 'lightblue', 'lightgreen',
            \                  'lightcyan', 'lightred', 'lightmagenta',
            \                  'lightyellow'],
            \ 'ctermfgs'    : ['lightgray', 'lightblue', 'lightgreen',
            \                  'lightcyan', 'lightred', 'lightmagenta',
            \                  'lightyellow'],
            \ 'operators'   : '_, _',
            \ 'parentheses' : [['(', ')'], ['\[', '\]'], ['{', '}']],
            \ 'separately'  : {
            \     '*'   : {},
            \     'php' : {
            \         'parentheses' : [
            \             ['(', ')'],
            \             ['\[', '\]'],
            \             ['{', '}'],
            \             ['do', 'while'],
            \             ['for', 'endfor'],
            \             ['foreach', 'endforeach'],
            \             ['if', '_elseif\|else_', 'endif'],
            \             ['while', 'endwhile']
            \             ]
            \         },
            \     'python' : 0,
            \     'tex' : {
            \         'parentheses' : [
            \             ['(', ')'],
            \             ['\[', '\]'],
            \             ['\\begin{.*}', '\\end{.*}']
            \             ]
            \         },
            \     'vim' : {
            \         'parentheses' : [
            \             ['(', ')'],
            \             ['\[', '\]'],
            \             ['{', '}'],
            \             ['for', 'endfor'],
            \             ['fu\w* \s*.*)', 'endfu\w*'],
            \             ['if', '_elseif\|else_', 'endif'],
            \             ['while', 'endwhile']
            \             ]
            \         },
            \     }
            \}
"}}}
"}}}

" {{{ SuperTab
" {{{ SuperTabDefaultCompletionType
" Used to set the default completion type. There is no need to escape this value
" as that will be done for you when the type is set.
let g:SuperTabDefaultCompletionType = 'context'
"}}}

" {{{ SuperTabClosePreviewOnPopupClose
" When enabled, supertab will attempt to close vim's completion preview window
" when the completion popup closes (completion is finished or canceled).
let g:SuperTabClosePreviewOnPopupClose = 1
"}}}

" {{{ SuberTab autocommands
augroup SuperTab
    autocmd FileType *
                \ if &omnifunc != '' |
                \     call SuperTabChain(&omnifunc, "<c-p>") |
                \ endif
augroup END
"}}}
"}}}

" {{{ Syntastic
" {{{ syntastic_auto_loc_list
" Use this option to tell syntastic to automatically open and/or close the
" location-list (see syntastic-error-window).
"
" When set to 0 the error window will not be opened or closed automatically. >
"     let g:syntastic_auto_loc_list = 0
" When set to 1 the error window will be automatically opened when errors are
" detected, and closed when none are detected.
"     let g:syntastic_auto_loc_list = 1
" When set to 2 the error window will be automatically closed when no errors are
" detected, but not opened automatically.
"     let g:syntastic_auto_loc_list = 2
let g:syntastic_auto_loc_list = 1
"}}}

" {{{ Syntax Checker
" {{{ HTML
let g:syntastic_html_checkers = [
            \ 'tidy',
            \ 'jshint',
            \ ]
"}}}

" {{{ PHP
let g:syntastic_php_checkers = [
            \ 'php',
            \ 'phpcs',
            \ 'phpmd'
            \ ]
"}}}

" {{{ Python
" prefer version 3 over version 2
if filereadable('/usr/bin/python3')
    let g:syntastic_python_python_exe = 'python3'
else
    let g:syntastic_python_python_exe = 'python'
endif

" python check
let g:syntastic_python_checkers = [
            \ 'python',
            \ 'flake8',
            \ 'pep8',
            \ 'pyflakes',
            \ 'pylint'
            \ ]
"}}}
"}}}
"}}}

" {{{ TagBar
" {{{ toggle display/mappings
nnoremap <silent> <C-w><C-t> :TagbarToggle<cr>
"}}}

" {{{ autoopen for specific filetypes
"if has("autocmd")
"    augroup AutoOpenTagBar
"        autocmd FileType c,cpp,php,python.vim nested :TagbarOpen
"    augroup END
"endif
"}}}

" {{{ tagbar_width
" Width of the Tagbar window in characters.
let g:tagbar_width = 60
"}}}

" {{{ tagbar_autofocus
" If you set this option the cursor will move to the Tagbar window when it is
" opened.
let g:tagbar_autofocus = 1
" }}}

" {{{ tagbar_show_linenumbers
" Whether line numbers should be shown in the Tagbar window.
" Possible values are:
"   0: Don't show any line numbers.
"   1: Show absolute line numbers.
"   2: Show relative line numbers.
"  -1: Use the global line number settings.
let g:tagbar_show_linenumbers = -1
"}}}

" {{{ tagbar_foldlevel
" The initial foldlevel for folds in the Tagbar window. Folds with a level
" higher than this number will be closed.
let g:tagbar_foldlevel = 2
"}}}

" {{{ tagbar_autoshowtag
" If this variable is set and the current tag is inside of a closed fold then
" the folds will be opened as much as needed for the tag to be visible so it can
" be highlighted. If it is not set then the folds won't be opened and the parent
" tag will be highlighted instead. You can use the :TagbarShowTag command to
" open the folds manually.
let g:tagbar_autoshowtag = 1
"}}}

" {{{ tagbar_type_sql
let g:tagbar_type_sql = {
            \    'replace'   : 1,
            \    'ctagstype' : 'sql',
            \    'sort'      : 0,
            \    'kinds'     : [
            \        'P:Packages',
            \        'd:Prototypes',
            \        'c:Cursors',
            \        'f:Functions',
            \        'F:Record fields:1:0',
            \        'L:Block label',
            \        'p:Procedures',
            \        's:Subtypes',
            \        't:Tables',
            \        'T:Triggers',
            \        'v:Variables',
            \        'i:Indexes',
            \        'e:Events',
            \        'U:Publications',
            \        'R:Services',
            \        'D:Domains',
            \        'V:Views',
            \        'n:Synonyms',
            \    ],
            \}
"}}}

" {{{ tagbar_type_tex
let g:tagbar_type_tex = {
            \    'ctagstype' : 'latex',
            \    'sort'      : 0,
            \    'kinds'     : [
            \        's:Sections',
            \        'g:Graphics:0:0',
            \        'l:Labels',
            \        'r:Refs:1:0',
            \        'p:Pagerefs:1:0'
            \    ],
            \}
"}}}

" {{{ tagbar_type_sh
let g:tagbar_type_sh = {
            \    'ctagstype' : 'sh',
            \    'sort'      : 0,
            \    'kinds'     : [
            \        'f:Functions',
            \        'a:Alias',
            \        'v:Variable',
            \        'o:Options',
            \    ],
            \}
"}}}

" {{{ tagbar_type_sshconfig
let g:tagbar_type_sshconfig = {
            \    'ctagstype' : 'sshconfig',
            \    'sort'      : 0,
            \    'kinds'     : [
            \        'h:Host',
            \    ],
            \}
"}}}

" {{{ tagbar_type_html
let g:tagbar_type_html = {
            \    'ctagstype' : 'html',
            \    'sort'      : 0,
            \    'kinds'     : [
            \        'a:named Anchor',
            \        'f:Javascript function'
            \    ],
            \}
"}}}

" {{{ tagbar_type_javascript
let g:tagbar_type_javascript = {
            \    'ctagstype' : 'Javascript',
            \    'sort'      : 0,
            \    'kinds'     : [
            \        'f:Functions',
            \        'c:Classes',
            \        'm:Methods',
            \        'p:Properties',
            \        'v:Global:variables',
            \        'r:Object',
            \        'r:Function',
            \        'r:Function',
            \        'r:Array',
            \        'r:String',
            \        'r:String',
            \    ],
            \}
"}}}
"}}}

" {{{ TagBar PHP-CTags
" {{{ tagbar_phpctags_bin
" Location of phpctags.
let g:tagbar_phpctags_bin = expand(vimfiles."/bundle/PHP-CTags/bin/phpctags")
"}}}

" {{{ tagbar_phpctags_memory_limit
" The amount of memory that phpctags can use can be configured.
let g:tagbar_phpctags_memory_limit = '1G'
"}}}
"}}}

" {{{ Unite
" {{{ unite_source_history_yank_enable
" If defined and not 0, unite enables unite-source-history/yank.
let g:unite_source_history_yank_enable = 1
"}}}

" {{{ mappings
nnoremap <silent> <C-p> :Unite -buffer-name=files -start-insert file_rec/git<cr>
nnoremap <silent> ,u/ :Unite -buffer-name=grep -start-insert grep:.<cr>
nnoremap <silent> ,ub :Unite -buffer-name=buffer -quick-match buffer<cr>
nnoremap <silent> ,uj :Unite -buffer-name=tabs jump<cr>
nnoremap <silent> ,us :Unite -buffer-name=session session<cr>
nnoremap <silent> ,ut :Unite -buffer-name=tabs tab<cr>
nnoremap <silent> ,uy :Unite -buffer-name=history history/yank<cr>
"}}}
"}}}

" {{{ Unite-Session
" {{{ unite_source_session_path
" Path to save session in.
let g:unite_source_session_path = vimfiles."/sessions"
"}}}
"}}}

" {{{ Vimfiler
" {{{ vimfiler_as_default_explorer
" If this variable is true, Vim use vimfiler as file manager instead of netrw.
let g:vimfiler_as_default_explorer = 1
"}}}

" {{{ vimfiler_edit_action
" This variable controls vimfiler edit action in |unite|.
let g:vimfiler_edit_action = 'tabopen'
"}}}

" {{{ mappings
nnoremap ,f :VimFilerTab -toggle <cr>
"}}}
"}}}

" vim: filetype=vim textwidth=80 foldmethod=marker
