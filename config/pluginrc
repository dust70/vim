" {{{ NeoBundle
" {{{ g:neobundle#install_max_processes
" The max number of processes used for neobundle/install source asynchronous
" update.
let g:neobundle#install_max_processes = 1
"}}}

let g:bundlePath=split(&runtimepath, ',')[0] . '/bundle'
let g:pathToNeoBundle=expand(bundlePath).'/NeoBundle'
if filereadable(pathToNeoBundle.'/plugin/neobundle.vim')
    " {{{ initialize
    if has('vim_starting')
        set nocompatible
        let &runtimepath.=','.expand(pathToNeoBundle)
    endif
    "}}}

    " {{{ bundle path and call NeoBundle
    call neobundle#begin(expand(bundlePath))
    "}}}

    " {{{ Bundles
    " {{{ NeoBundle
    NeoBundleFetch 'Shougo/neobundle.vim', {
                \ 'depends': [
                \    ['Shougo/vimproc.vim', {
                \        'directory': 'Proc',
                \        'name': 'Proc',
                \        'build': {
                \            'windows': 'vimproc_updcmd',
                \            'cygwin': 'make -f make_cygwin.mak',
                \            'mac': 'make -f make_mac.mak',
                \            'unix': 'make -f make_unix.mak',
                \        },
                \    }],
                \ ],
                \ 'directory': 'NeoBundle',
                \ 'name': 'NeoBundle',
                \ }
    "}}}

    " {{{ Plugins
    NeoBundle "tpope/vim-abolish", {
                \ 'directory': 'Abolish',
                \ 'name': 'Abolish'
                \ }

    NeoBundle 'bling/vim-airline', {
                \ 'depends': [
                \    ['ntpeters/vim-airline-colornum', {
                \        'directory': 'AirlineNum',
                \        'name': 'AirlineNum'
                \        }]
                \    ],
                \ 'directory': 'Airline',
                \ 'name': 'Airline'
                \ }

    NeoBundle 'Chiel92/vim-autoformat', {
                \ 'directory': 'AutoFormat',
                \ 'name': 'AutoFormat'
                \ }

    NeoBundle 'jiangmiao/auto-pairs', {
                \ 'directory': 'AutoPairs',
                \ 'name': 'AutoPairs'
                \ }

    NeoBundle 'veloce/vim-behat', {
                \ 'directory': 'Behat',
                \ 'name': 'Behat'
                \ }

    NeoBundle 'chrisbra/Colorizer', {
                \ 'directory': 'Colorizer',
                \ 'name': 'Colorizer'
                \ }

    NeoBundle 'flazz/vim-colorschemes', {
                \ 'directory': 'Colorschemes',
                \ 'name': 'Colorschemes'
                \ }

    NeoBundle 'hail2u/vim-css3-syntax', {
                \ 'directory': 'CSS',
                \ 'name': 'CSS'
                \ }

    NeoBundle 'skammer/vim-css-color', {
                \ 'directory': 'CSS-Color',
                \ 'name': 'CSS-Color'
                \ }

    NeoBundle 'chrisbra/csv.vim', {
                \ 'directory': 'CSV',
                \ 'name': 'CSV'
                \ }

    NeoBundle 'rking/vim-detailed', {
                \ 'directory': 'Detailed',
                \ 'name': 'Detailed'
                \ }

    NeoBundle 'chrisbra/vim-diff-enhanced', {
                \ 'directory': 'DiffEnhanced',
                \ 'name': 'DiffEnhanced'
                \ }

    NeoBundle 'tpope/vim-dispatch', {
                \ 'directory': 'Dispatch',
                \ 'name': 'Dispatch'
                \ }

    NeoBundle 'xolox/vim-easytags', {
                \ 'depends': [
                \    ['xolox/vim-misc', {
                \        'directory': 'Misc',
                \        'name': 'Misc'
                \        }]
                \    ],
                \ 'directory': 'EasyTags',
                \ 'name': 'EasyTags'
                \ }

    NeoBundle 'tpope/vim-endwise', {
                \ 'directory': 'Endwise',
                \ 'name': 'Endwise'
                \ }

    NeoBundle 'Shougo/vimfiler.vim', {
                \ 'depends': [
                \    ['Shougo/tabpagebuffer.vim', {
                \        'directory': 'TabpageBuffer',
                \        'name': 'TabpageBuffer'
                \        }]
                \    ],
                \ 'directory': 'Filer',
                \ 'name': 'Filer'
                \ }

    NeoBundle 'aserebryakov/filestyle', {
                \ 'directory': 'Filestyle',
                \ 'name': 'Filestyle'
                \ }

    NeoBundle 'tpope/vim-fugitive', {
                \ 'augroup': 'fugitive',
                \ 'directory': 'FuGITive',
                \ 'name': 'FuGITive'
                \ }

    NeoBundle 'tpope/vim-git', {
                \ 'directory': 'Git',
                \ 'name': 'Git'
                \ }

    NeoBundle 'airblade/vim-gitgutter', {
                \ 'directory': 'Gutter',
                \ 'name': 'Gutter'
                \ }

    NeoBundle 'jamessan/vim-gnupg', {
                \ 'directory': 'GnuPG',
                \ 'name': 'GnuPG'
                \ }

    NeoBundle 'othree/html5.vim', {
                \ 'directory': 'HTML5',
                \ 'name': 'HTML5'
                \ }

    NeoBundle 'mjbrownie/vim-htmldjango_omnicomplete', {
                \ 'directory': 'HTMLDjango',
                \ 'name': 'HTMLDjango'
                \ }

    NeoBundle 'xolox/vim-lua-ftplugin', {
                \ 'depends': [
                \    ['xolox/vim-misc', {
                \        'directory': 'Misc',
                \        'name': 'Misc'
                \        }]
                \    ],
                \ 'directory': 'LuaFtPlugin',
                \ 'name': 'LuaFtPlugin'
                \ }

    NeoBundle 'nathanaelkane/vim-indent-guides', {
                \ 'directory': 'IndentGuides',
                \ 'name': 'IndentGuides'
                \ }

    NeoBundle 'artur-shaik/vim-javacomplete2', {
                \ 'directory': 'Java',
                \ 'disabled': !has('python'),
                \ 'name': 'Java'
                \ }

    NeoBundle 'davidhalter/jedi-vim', {
                \ 'directory': 'Jedi',
                \ 'name': 'Jedi',
                \ 'disabled': !has('python')
                \ }

    NeoBundle 'xolox/vim-lua-inspect', {
                \ 'depends': [
                \    ['xolox/vim-misc', {
                \        'directory': 'Misc',
                \        'name': 'Misc'
                \        }]
                \    ],
                \ 'directory': 'LuaInspect',
                \ 'name': 'LuaInspect'
                \ }

    NeoBundle 'dietsche/vim-lastplace', {
                \ 'directory': 'Lastplace',
                \ 'name': 'Lastplace'
                \ }

"    NeoBundle 'http://git.code.sf.net/p/vim-latex/vim-latex', {
"                \ 'directory': 'LaTeX',
"                \ 'name': 'LaTeX'
"                \ }

    NeoBundle 'luishdez/vim-less', {
                \ 'directory': 'Less',
                \ 'name': 'Less'
                \ }

    NeoBundle 'jreybert/vimagit', {
                \ 'directory': 'Magit',
                \ 'name': 'Magit'
                \ }

    NeoBundle 'dbeniamine/vim-mail', {
                \ 'depends': [
                \    ['chrisbra/CheckAttach', {
                \        'directory': 'CheckAttach',
                \        'name': 'CheckAttach'
                \        }]
                \    ],
                \ 'directory': 'Mail',
                \ 'name': 'Mail'
                \ }

    NeoBundle 'gregsexton/MatchTag', {
                \ 'directory': 'MatchTag',
                \ 'name': 'MatchTag'
                \ }

    NeoBundle 'Shougo/neocomplete', {
                \ 'vim_version': '7.3.885',
                \ 'depends': [
                \    ['Shougo/vimshell.vim', {
                \        'directory': 'Shell',
                \        'name': 'Shell'
                \        }],
                \    ['Shougo/context_filetype.vim',
                \        {
                \        'directory': 'ContextFileType',
                \        'name': 'ContextFileType'
                \        }]
                \    ],
                \ 'directory': 'NeoComplete',
                \ 'disabled': !has('lua'),
                \ 'name': 'NeoComplete'
                \ }

    NeoBundle 'Shougo/neosnippet', {
                \ 'depends': [
                \    ['Shougo/neosnippet-snippets', {
                \        'directory': 'NeoSnippet-Snippets',
                \        'name': 'NeoSnippet-Snippets'
                \        }],
                \    ['honza/vim-snippets', {
                \        'directory': 'Snippets',
                \        'name': 'Snippets'
                \        }],
                \    ['spf13/snipmate-snippets', {
                \        'directory': 'Snipmate-Snippets',
                \        'name': 'Snipmate-Snippets'
                \        }]
                \    ],
                \ 'directory': 'NeoSnippet',
                \ 'name': 'NeoSnippet'
                \ }

    NeoBundle 'scrooloose/nerdcommenter', {
                \ 'directory': 'Nerdcommenter',
                \ 'name': 'Nerdcommenter'
                \ }

    NeoBundle 'vimoutliner/vimoutliner', {
                \ 'directory': 'Outliner',
                \ 'name': 'Outliner'
                \ }

    NeoBundle 'rkitover/vimpager', {
                \ 'directory': 'Pager',
                \ 'name': 'Pager'
                \ }

    NeoBundle 'shawncplus/phpcomplete.vim', {
                \ 'directory': 'PHPComplete',
                \ 'name': 'PHPComplete'
                \ }

    NeoBundle 'vim-php/tagbar-phpctags.vim', {
                \ 'build': {
                \    'cygwin': 'make',
                \    'mac': 'make',
                \    'unix': 'make',
                \    'windows': 'make'
                \    },
                \ 'directory': 'PHPCTags',
                \ 'name': 'PHPCTags'
                \ }

    NeoBundle 'tobyS/pdv', {
                \ 'depends': [
                \    ['tobyS/vmustache', {
                \        'directory': 'VMustache',
                \        'name': 'VMustache'
                \        }]
                \    ],
                \ 'directory': 'PDV',
                \ 'name': 'PDV'
                \ }

    NeoBundle 'nishigori/vim-php-dictionary', {
                \ 'directory': 'PHPDictionary',
                \ 'name': 'PHPDictionary'
                \ }

    NeoBundle '2072/PHP-Indenting-for-VIm', {
                \ 'directory': 'PHPIndention',
                \ 'name': 'PHPIndention'
                \ }

    NeoBundle 'alvan/vim-php-manual', {
                \ 'directory': 'PHPManual',
                \ 'name': 'PHPManual'
                \ }

    NeoBundle 'tpope/vim-projectionist', {
                \ 'directory': 'Projectionist',
                \ 'name': 'Projectionist'
                \ }

    NeoBundle 'rodjek/vim-puppet', {
                \ 'directory': 'Puppet',
                \ 'name': 'Puppet'
                \ }

    NeoBundle 'luochen1990/rainbow', {
                \ 'directory': 'Rainbow_Parentheses_Improved',
                \ 'name': 'Rainbow Parentheses Improved'
                \ }

    NeoBundle 'ciaranm/securemodelines', {
                \ 'directory': 'SecureModelines',
                \ 'name': 'SecureModelines'
                \ }

    NeoBundle 'ervandew/supertab', {
                \ 'directory': 'Supertab',
                \ 'name': 'Supertab'
                \ }

    NeoBundle 'tpope/vim-surround', {
                \ 'directory': 'Surround',
                \ 'name': 'Surround'
                \ }

    NeoBundle 'mjbrownie/swapit', {
                \ 'directory': 'SwapIt',
                \ 'name': 'SwapIt'
                \ }

    NeoBundle 'scrooloose/syntastic', {
                \ 'directory': 'Syntastic',
                \ 'name': 'Syntastic'
                \ }

    NeoBundle 'godlygeek/tabular', {
                \ 'directory': 'Tabular',
                \ 'name': 'Tabular'
                \ }

    NeoBundle 'majutsushi/tagbar', {
                \ 'directory': 'Tagbar',
                \ 'name': 'Tagbar'
                \ }

    NeoBundle 'mbbill/undotree', {
                \ 'directory': 'UndoTree',
                \ 'name': 'UndoTree'
                \ }

    NeoBundle 'Shougo/unite.vim', {
                \ 'depends': [
                \    ['Shougo/tabpagebuffer.vim', {
                \        'directory': 'TabpageBuffer',
                \        'name': 'TabpageBuffer'
                \        }]
                \    ],
                \ 'directory': 'Unite',
                \ 'name': 'Unite'
                \ }

    NeoBundle 'Shougo/neomru.vim', {
                \ 'directory': 'UniteMRU',
                \ 'name': 'UniteMRU'
                \ }

    NeoBundle 'tsukkee/unite-tag', {
                \ 'dictionary': 'UniteTag',
                \ 'name': 'UniteTag'
                \ }

    NeoBundle 'joonty/vdebug', {
                \ 'directory': 'VDebug',
                \ 'name': 'VDebug'
                \ }

    NeoBundle 'jmcantrell/vim-virtualenv', {
                \ 'directory': 'VirtualEnv',
                \ 'name': 'VirtualEnv'
                \ }

    NeoBundle 'bronson/vim-visual-star-search', {
                \ 'directory': 'VisualStarSearch',
                \ 'name': 'VisualStarSearch'
                \ }

    NeoBundle 'ntpeters/vim-better-whitespace', {
                \ 'directory': 'Whitespace',
                \ 'name': 'Whitespace'
                \ }
    "}}}

    call neobundle#end()
    "}}}
endif
unlet pathToNeoBundle
unlet bundlePath
"}}}

" {{{ Bufexplorer disabled
let g:bufexplorer_version = 1
"}}}

" {{{ MiniBufExpl disabled
let g:loaded_minibufexplorer = 1
"}}}

" {{{ Abolish
let g:abolish_save_file = expand("~/.vim/config/plugin/abolish.vim")
"}}}

" {{{ Airline
" {{{ tabline
" enable/disable enhanced tabline.
let g:airline#extensions#tabline#enabled = 1

" enable/disable displaying buffers with a single tab.
let g:airline#extensions#tabline#show_buffers = 1

" configure how numbers are calculated in tab mode.
let g:airline#extensions#tabline#tab_nr_type = 1

" enable/disable displaying tab number in tabs mode.
let g:airline#extensions#tabline#show_tab_nr = 1
"}}}
"}}}

" {{{ AutoFormat
" I need a better formatter for PHP scripts, preferable Zend Coding conform
let g:formatdef_my_php = '"astyle -pcHjJs" . &shiftwidth'
let g:formatters_php = ['my_php']

nmap <silent> <leader>af :Autoformat<cr>:%s/\(\.\\|=\) =/\1=/ge<cr>:%s/<?\s*php/<?php/ge<cr>:call StripDoubleEmptyLines()<cr>:call FormatFile()<cr>
"}}}

" {{{ Behat
" {{{ feature_filetype
" mandatory if you want the '*.feature' files to be set with behat filetype
let g:feature_filetype = 'behat'
"}}}

" {{{ behat_executables
" The plugin tries successively several behat executables to find the good one
" (php behat.phar, bin/behat, etc). You can define a custom list that will
" be prepended to the default path with g:behat_executables.
let g:behat_executables = [ './bin/behat' ]"
"}}}
"}}}

" {{{ DeleteTrailingWhitespace
" {{{ DeleteTrailingWhitespace
" By default, trailing whitespace is processed before writing the buffer when it
" has been detected and is currently being highlighted by the
" |ShowTrailingWhitespace.vim| plugin.
let g:DeleteTrailingWhitespace = 0
"}}}
"}}}

" {{{ Dispatch
" {{{ key mappings
nmap <silent> <leader>dt :Make %:t:r<cr>
nmap <silent> <leader>dc :close<cr>
nmap <silent> <leader>do :Copen<cr>
nmap <silent> <leader>dT :Dispatch<cr>
"}}}
"}}}

" {{{ EasyTags
" {{{ easytags_async
" By default vim-easytags runs Exuberant Ctags and updates your tags file in the
" foreground, blocking Vim in the process. As your tags files get larger this
" becomes more annoying. It has been the number one complaint about vim-easytags
" since I published the first release online.
let g:easytags_async = 1
"}}}

" {{{ easytags_languages
" Exuberant Ctags supports many languages and can be extended via regular
" expression patterns, but for some languages separate tools with
" ctags-compatible output exist (e.g. jsctags for Javascript). To use these, the
" executable and its arguments must be configured:
let g:easytags_languages = {}
"}}}

" {{{ easytags_file
" As mentioned above the plug-in will store your tags in ~/.vimtags on UNIX and
" ~/_vimtags on Windows. To change the location of this file, set the global
" variable g:easytags_file.
let g:easytags_file = './tags'
"}}}

" {{{ easytags_dynamic_files
" By default :UpdateTags only writes to the global tags file, but it can be
" configured to look for project specific tags files by adding the following
" lines to your vimrc script:
let g:easytags_dynamic_files = 1
"}}}

" {{{ easytags_by_filetype
" By default all tags are stored in a global tags file. When the tags file grows
" beyond a certain size Vim will be slowed down by the easytags plug-in because
" it has to read and process a large number of tags very frequently.
" To avoid this problem you can set g:easytags_by_filetype to the path of an
" existing directory. The easytags plug-in will create separate tags files for
" each file type in the configured directory. These tags files are automatically
" registered by the easytags plug-in when the file type of a buffer is set.
let g:easytags_by_filetype = 1
"}}}

" {{{ easytags_events
" This option can be used to customize the events that trigger the automatic
" updating and highlighting performed by the easytags plug-in. The
" g:easytags_always_enabled and g:easytags_on_cursorhold options are more user
" friendly but limited ways to accomplish the same thing.
let g:easytags_events = ['BufWritePost', 'FileWritePost', 'FilterWritePost']
"}}}

" {{{ easytags_on_cursorhold
" As I explained above the plug-in by default doesn't update or highlight your
" tags until you stop typing for a moment. The plug-in tries hard to do the
" least amount of work possible in this break but it might still interrupt your
" workflow.
let g:easytags_on_cursorhold = 0
"}}}

" {{{ easytags_updatetime_min
" Vim's 'updatetime' option controls how often the easytags plug-in is
" automatically executed. A lot of popular Vim plug-ins manipulate this option
" to control how often they are called. Unfortunately some of those plug-ins set
" 'updatetime' to a very low value (less than a second) and this can break the
" easytags plug-in. Because of this the easytags plug-in compensates by keeping
" track of when it was last executed.
let g:easytags_updatetime_min = 600000
"}}}

" {{{ easytags_auto_update
" By default the plug-in automatically updates and highlights your tags when you
" stop typing for a moment. If you want to disable automatic updating while
" keeping automatic highlighting enabled you can set this option to false:
let g:easytags_auto_update = 0
"}}}

" {{{ easytags_auto_highlight
" By default the plug-in automatically updates and highlights your tags when you
" stop typing for a moment. If you want to disable automatic highlighting while
" keeping automatic updating enabled you can set this option to false:
let g:easytags_auto_highlight = 0
"}}}

"{{{ easytags_autorecurse
" When the :UpdateTags command is executed automatically or without arguments,
" it defaults to updating just the tags for the current file. If you'd rather
" have it recursively scan everything below the directory of the current file
" then set this option to true (1):
let g:easytags_autorecurse = 1
"}}}
"}}}

" {{{ Filer
" {{{ vimfiler_as_default_explorer
" If this variable is true, Vim use vimfiler as file manager instead of netrw.
let g:vimfiler_as_default_explorer = 1
"}}}

" {{{ g:vimfiler_define_wrapper_commands
" If this variable is true, vimfiler will define wrappercommands(|:Edit|, |:Write|, |:Source|, |:Read|).
let g:vimfiler_execute_file_list = 1
"}}}

" {{{ vimfiler_data_directory
" Specifies directories for configurations internally used in vimfiler itself or
" its sources. If the directory doesn't exist the directory will be
" automatically generated.
let g:vimfiler_data_directory = g:vimfiles . "/tmp/files"
"}}}

" {{{ vimfiler#custom#profile()
" Set {profile-name} specialized {option-name} to {value}.
call vimfiler#custom#profile('default', 'context', {
            \ 'buffer-name': 'VimFiler',
            \ 'columns': 'type:size:time',
            \ 'safe': 0,
            \ 'sort_type': 'filename',
            \ 'status': 1
            \ })
"}}}

" {{{ mappings
nmap <silent> <leader>fe :VimFilerExplorer<cr>
nmap <silent> <leader>fo :VimFiler<cr>
nmap <silent> <leader>ft :VimFiler -tab<cr>

nmap <silent> <leader>fh :Unite -buffer-name=history vimfiler/history<cr>
nmap <silent> <leader>fm :Unite -buffer-name=mask vimfiler/mask<cr>
nmap <silent> <leader>fp :Unite -buffer-name=popd vimfiler/popd<cr>
nmap <silent> <leader>fs :Unite -buffer-name=sort vimfiler/sort<cr>
"}}}
"}}}

" {{{ FuGITive
" {{{ mappings
nmap <silent> <leader>ga :Gwrite<cr>
nmap <silent> <leader>gb :Gblame<cr>
nmap <silent> <leader>gc :Gcommit<cr>
nmap <silent> <leader>gd :Gdiff<cr>
nmap <silent> <leader>gp :Gpush<cr>
"}}}
"}}}

" {{{ Gutter
" {{{ gitgutter_map_keys
let g:gitgutter_map_keys = 0
"}}}

" {{{ gitgutter_realtime
let g:gitgutter_realtime = 0
"}}}
"}}}

" {{{ IndentGuides
" {{{ indent_guides_auto_colors
" Use this option to control whether or not the plugin automatically calculates
" the highlight colors. Will use the current colorscheme's background color as a
" base color.
let g:indent_guides_auto_colors = 0
"}}}

" {{{ indent_guides_enable_on_vim_startup
" Use this option to control whether the plugin is enabled on Vim startup.
let g:indent_guides_enable_on_vim_startup = 1
"}}}
"}}}

" {{{ Lastplace
" {{{ lastplace_ignore
" You can configure what file types to ignore by setting g:lastplace_ignore.
" For example to only ignore git and svn commit messages try this in your vimrc:
let g:lastplace_ignore = "gitcommit,svn,asciidoc"
"}}}
"}}}

" {{{ LaTeX
" {{{ tex_flavor
" If the first line of a *.tex file has the form
"	%&<format>
" then this determined the file type: plaintex (for plain TeX), context (for
" ConTeXt), or tex (for LaTeX). Otherwise, the file is searched for keywords
" to choose context or tex. If no keywords are found, it defaults to plaintex.
" You can change the default by defining the variable g:tex_flavor to the
" format (not the file type) you use most. Use one of these:
"	let g:tex_flavor = "plain"
"	let g:tex_flavor = "context"
"	let g:tex_flavor = "latex"
" Currently no other formats are recognized.
let g:tex_flavor = 'latex'
"}}}
"}}}

"{{{ LaTeX-Suite
" {{{ Tex_DefaultTargetFormat
" Use this setting to choose the default target format. For example, setting
" this to pdf makes LaTeX-Suite compile a pdf file when you press \ll and fire
" up the pdf viewer on pressing \lv. Make sure that a rules for compiling and
" viewing have been defined for this target format as described here [ls_a_dx]
" and here [ls_a_dF].
let g:Tex_DefaultTargetFormat = 'pdf'
"}}}
"}}}

" {{{ NeoComplete
" {{{ acp_enableAtStartup
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
"}}}

" {{{ neocomplete#enable_at_startup
" neocomplete gets started automatically when Vim starts if this value is 1.
let g:neocomplete#enable_at_startup = 1
"}}}

" {{{ neocomplete#auto_completion_start_length
" This variable controls the number of the input completion at the time of key
" input automatically.
let g:neocomplete#auto_completion_start_length = 5
"}}}

" {{{ neocomplete#manual_completion_start_length
" This variable controls the number of the input completion at the time of
" manual completion. It is convenient when you reduce this value, but may get
" heavy when you deleted a letter in <C-h> or <BS> at popup indication time.
let g:neocomplete#manual_completion_start_length = 4
"}}}

" {{{ neocomplete#enable_smart_case
" When a capital letter is included in input, neocomplete does not ignore the
" upper- and lowercase.
let g:neocomplete#enable_smart_case = 1
"}}}

" {{{ neocomplete#data_directory
" This variable appoints the directory that neocomplete begins to write a file
" at one time. When there is not the directory which appointed here, it is made.
" For example, buffer.vim stores cache of the keyword in this 'buffer_cache' sub
"directory.
let g:neocomplete#data_directory = g:vimfiles . '/tmp/neocomplete'
"}}}

" {{{ neocomplete#keyword_patterns
" This dictionary records keyword patterns to completion. This is appointed in
" regular expression every file type. If the key is "_" or "default", it is used
" for default pattern.
let g:neocomplete#keyword_patterns = {
            \'_': '\h\w*'
            \ }
"}}}

" {{{ neocomplete#delimiter_patterns
" This variable appoints a delimiter pattern to smart complete a function. This
" is appointed in string list every file type.
let g:neocomplete#delimiter_patterns = {
            \ 'cpp': ['::'],
            \ 'java': ['.'],
            \ 'php': ['::', '->'],
            \ 'python': ['.'],
            \ 'vim': ['#']
            \ }
"}}}

" {{{ neocomplete#sources
" It is a dictionary to decide use source names. The key is filetype and the
" value is source names list. If the key is "_", the value will be used for
" default filetypes. For example, you can disable some sources in C++ filetype.
" If the value is "_", it will load all sources.
let g:neocomplete#sources = {
            \ '_': [],
            \ 'cpp': ['neosnippet', 'omni', 'include', 'tag', 'buffer'],
            \ 'html': ['neosnippet', 'omni', 'buffer'],
            \ 'php': ['neosnippet', 'omni', 'include', 'tag', 'buffer'],
            \ 'python': ['neosnippet', 'omni', 'include', 'tag', 'buffer']
            \ }
"}}}

" {{{ neocomplete#release_cache_time
" This variable defines time of automatic released cache by a second unit.
let g:neocomplete#release_cache_time = 43200
"}}}

" {{{ neocomplete#ignore_composite_filetypes
" It is a dictionary to ignore composite file type. The dictionary's key is
" composite filetype and value is filetype.
let g:neocomplete#ignore_composite_filetypes = {
            \ 'php.html': 'php'
            \ }
"}}}

" {{{ neocomplete#sources#dictionary#dictionaries
" It is a dictionary to connect a dictionary file with file type. The
" dictionary's key is filetype and comma-separated multiple value is a path to a
" dictionary file. If the variable is unset or has an empty key, the native
" 'dictionary' option will be inherited. When you set "text" key, you will
" appoint dictionary files in text mode. If the key is "_", it is loaded in
" every filetype.
let g:neocomplete#sources#dictionary#dictionaries = {
            \ 'default': '',
            \ 'vimshell': g:vimfiles . '/tmp/vimshell'
            \ }
"}}}

" {{{ neocomplete#sources#buffer#cache_limit_size
" This variable sets file size to make a cache of a file. If open file is bigger
" than this size, neocomplete does not make a cache.
let g:neocomplete#sources#buffer#cache_limit_size = 50000000
"}}}

" {{{ neocomplete#sources#omni#input_patterns
" This dictionary records keyword patterns used in omni source. This is
" appointed in regular expression every file type or 'omnifunc' name. If this
" pattern is not defined or empty pattern, neocomplete does not call 'omnifunc'.
if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns = {
            \ 'behat': '\(When\|Then\|Given\|And\)\s.*$',
            \ 'c': '[^.[:digit:] *\t]\%(\.\|->\)\%(\h\w*\)\?',
            \ 'php': '[^. \t]->\%(\h\w*\)\?\|\h\w*::\%(\h\w*\)\?'
            \ }
"}}}

" {{{ neocomplete#sources#tags#cache_limit_size
" This variable sets file size to make a cache of a file in tag source. If open
" file is bigger than this size, neocomplete does not make a tags cache.
let g:neocomplete#sources#tags#cache_limit_size = 50000000
"}}}
"}}}

" {{{ NeoSnippet
" {{{ key mappings and recommended options
imap <silent> <C-k> <Plug>(neosnippet_expand_or_jump)
smap <silent> <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <silent> <C-k> <Plug>(neosnippet_expand_target)
xmap <silent> <C-u> <Plug>(neosnippet_start_unite_snippet_target)

" For snippet_complete marker.
if has('conceal')
    set conceallevel=2
    set concealcursor=i
endif
"}}}

" {{{ neosnippet#snippets_directory
" This variable appoints a path to user-defined snippet files. You can set
" multiple values in comma-separated string or list. Non existing directories
" are ignored.
let g:neosnippet#snippets_directory = '' .
            \ g:vimfiles . '/snippets' . ',' .
            \ g:vimfiles . '/bundle/NeoSnippet-Snippets/neosnippets' . ',' .
            \ g:vimfiles . '/bundle/Snippets/snippets' . ',' .
            \ g:vimfiles . '/bundle/Snipmate-Snippets/snippets'
"}}}

" {{{ neosnippet#scope_aliases
" It is a dictionary that associating certain filetypes with other snippet
" files. The key is filetype, and the value is comma separated snippet filenames
" excluded extensions. It works like g:snipMate.scope_aliases.
let g:neosnippet#scope_aliases = {
            \ 'html': 'xhtml, html, css, javascript',
            \ 'php': 'php',
            \ 'python': 'python'
            \ }
"}}}

" {{{ neosnippet#data_directory
" Specifies directory for neosnippet cache. If the directory doesn't exist the
" directory will be automatically generated.
let g:neosnippet#data_directory = g:vimfiles . '/tmp/neosnippet'
"}}}
"}}}

" {{{ Rainbow Parentheses Improved
" {{{ rainbow_active
let g:rainbow_active = 1
"}}}

" {{{ rainbow_conf
let g:rainbow_conf = {
            \ 'guifgs': ['lightgray', 'lightblue', 'lightgreen',
            \               'lightcyan', 'lightred', 'lightmagenta',
            \               'lightyellow'],
            \ 'ctermfgs': ['lightgray', 'lightblue', 'lightgreen',
            \               'lightcyan', 'lightred', 'lightmagenta',
            \               'lightyellow'],
            \ 'operators': '_, _',
            \ 'parentheses': [['(', ')'], ['\[', '\]'], ['{', '}']],
            \ 'separately': {
            \ '*': {},
            \ 'php': {
            \      'parentheses': [
            \          ['(', ')'],
            \          ['\[', '\]'],
            \          ['{', '}'],
            \          ['do', 'while'],
            \          ['for', 'endfor'],
            \          ['foreach', 'endforeach'],
            \          ['if', '_elseif\|else_', 'endif'],
            \          ['while', 'endwhile']
            \          ]
            \      },
            \ 'python': 0,
            \ 'tex': {
            \      'parentheses': [
            \          ['(', ')'],
            \          ['\[', '\]'],
            \          ['\\begin{.*}', '\\end{.*}']
            \          ]
            \      },
            \ 'vim': {
            \      'parentheses': [
            \          ['(', ')'],
            \          ['\[', '\]'],
            \          ['{', '}'],
            \          ['for', 'endfor'],
            \          ['fu\w* \s*.*)', 'endfu\w*'],
            \          ['if', '_elseif\|else_', 'endif'],
            \          ['while', 'endwhile']
            \          ]
            \      },
            \ }
            \ }
"}}}
"}}}

" {{{ PDV
let g:pdv_template_dir = $HOME ."/.vim/bundle/PDV/templates_snip"
nnoremap <buffer> <leader><C-p> :call pdv#DocumentWithSnip()<CR>
"}}}

" {{{ PHPComplete
" {{{ phpcomplete_parse_docblock_comments
" When enabled the preview window's content will include information extracted
" from docblock comments of the completions. Enabling this option will add
" return types to the completion menu for functions too.
let g:phpcomplete_parse_docblock_comments = 1
"}}}
"}}}

" {{{ SuperTab
" {{{ SuperTabClosePreviewOnPopupClose
" When enabled, supertab will attempt to close vim's completion preview window
" when the completion popup closes (completion is finished or canceled).
let g:SuperTabClosePreviewOnPopupClose = 1
"}}}

function! s:MyTagContext()
    if filereadable(expand('%:p:h') . '/tags')
        return "\<c-x>\<c-]>"
    endif
endfunction
let g:SuperTabCompletionContexts = ['s:MyTagContext', 's:ContextText', 's:ContextDiscover']
let g:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&completefunc']
let g:SuperTabContextDiscoverDiscovery =
            \ ["&completefunc:<c-x><c-u>", "&omnifunc:<c-x><c-o>"]

" {{{ SuberTab autocommands
augroup SuperTab
    autocmd FileType *
                \ if &omnifunc != '' |
                \    call SuperTabChain(&omnifunc, "<c-p>") |
                \    call SuperTabSetDefaultCompletionType("<c-x><c-u>") |
                \ endif
augroup END
"}}}
"}}}

" {{{ Syntastic
" {{{ syntastic_check_on_open
" If enabled, syntastic will do syntax checks when buffers are first loaded as
" well as on saving
if ! &diff
    let g:syntastic_check_on_open = 1
endif
"}}}

" {{{ syntastic_check_on_wq
" Normally syntastic runs syntax checks whenever buffers are written to disk. If
" you want to skip these checks when you issue |:wq|, |:x|, and |:ZZ|, set this
" variable to 0.
if ! &diff
    let g:syntastic_check_on_wq = 0
endif
"}}}

" {{{ syntastic_aggregate_errors
" When enabled, syntastic runs all checkers that apply to the current filetype,
" then aggregates errors found by all checkers and displays them. When disabled,
" syntastic runs each checker in turn, and stops to display the results the
" first time a checker finds any errors.
let g:syntastic_aggregate_errors = 1
"}}}

" {{{ syntastic_auto_loc_list
" Use this option to tell syntastic to automatically open and/or close the
" location-list (see syntastic-error-window).
" When set to 0 the error window will not be opened or closed automatically. >
"     let g:syntastic_auto_loc_list = 0
" When set to 1 the error window will be automatically opened when errors are
" detected, and closed when none are detected.
"     let g:syntastic_auto_loc_list = 1
" When set to 2 the error window will be automatically closed when no errors are
" detected, but not opened automatically.
"     let g:syntastic_auto_loc_list = 2
let g:syntastic_auto_loc_list = 1
"}}}

" {{{ syntastic_filetype_map
" Use this option to map non-standard filetypes to standard ones. Corresponding
" checkers are mapped accordingly, which allows syntastic to check files with
" non-standard filetypes
let g:syntastic_filetype_map = {
            \ 'latex': 'tex',
            \ }
"}}}

" {{{ syntastic_mode_map
" Use this option to fine tune when automatic syntax checking is done (or not
" done).
let g:syntastic_mode_map = {
            \ 'mode': 'active',
            \ 'active_filetypes': [
            \    'php',
            \    'python',
            \    'ruby'
            \ ],
            \ 'passive_filetypes': [
            \    'html',
            \    'puppet'
            \ ]}
"}}}

" {{{ mappings
nmap <silent> <leader>Sc :SyntasticCheck<cr>
nmap <silent> <leader>Se :Errors<cr>
nmap <silent> <leader>Si :SyntasticInfo<cr>
nmap <silent> <leader>Sr :SyntasticReset<cr>
nmap <silent> <leader>St :SyntasticToggleMode<cr>
"}}}

" {{{ Syntax Checker
" {{{ HTML
let g:syntastic_html_checkers = [
            \ 'tidy',
            \ 'jshint'
            \ ]
"}}}

" {{{ PHP
" {{{ syntastic_<filetype>_<checker>_exec
if executable('./bin/phpcs')
    let g:syntastic_php_phpcs_exec = './bin/phpcs'
endif
if executable('./bin/phpmd')
    let g:syntastic_php_phpmd_exec = './bin/phpmd'
endif
"}}}

" {{{ syntastic_php_phpcs_args
let g:syntastic_php_phpcs_args = "--standard=zend -l --extensions=php --tab-width=" . &tabstop
"}}}

let g:syntastic_php_checkers = [
            \ 'php',
            \ 'phplint',
            \ 'phpmd',
            \ 'phpcs'
            \ ]
"}}}

" {{{ Puppet
" puppet check
let g:syntastic_puppet_checkers = [
            \ 'puppet',
            \ 'puppetlint'
            \ ]

"}}}

" {{{ Python
" python check
let g:syntastic_python_checkers = [
            \ 'python',
            \ 'flake8',
            \ 'pep8',
            \ 'pyflakes',
            \ 'pylint'
            \ ]
"}}}

" {{{ Ruby
" ruby checker
let g:syntastic_ruby_checkers = [
            \ 'mri',
            \ 'rubylint'
            \ ]
"}}}

" {{{ VIm
" vim check
let g:syntastic_vim_checkers = [
            \ 'vim',
            \ 'vimlint'
            \ ]
"}}}

" {{{ XML
" xml check
let g:syntastic_xml_checkers = [
            \ 'xmllint',
            \ 'plutil'
            \ ]
"}}}
"}}}
"}}}

" {{{ TagBar
" {{{ toggle display/mappings
nmap <silent> <C-w><C-t> :TagbarToggle<cr>
"}}}

" {{{ tagbar_width
" Width of the Tagbar window in characters.
let g:tagbar_width = 50
"}}}

" {{{ tagbar_autofocus
" If you set this option the cursor will move to the Tagbar window when it is
" opened.
let g:tagbar_autofocus = 1
"}}}

" {{{ tagbar_show_linenumbers
" Whether line numbers should be shown in the Tagbar window.
" Possible values are:
"   0: Don't show any line numbers.
"   1: Show absolute line numbers.
"   2: Show relative line numbers.
"  -1: Use the global line number settings.
let g:tagbar_show_linenumbers = -1
"}}}

" {{{ tagbar_foldlevel
" The initial foldlevel for folds in the Tagbar window. Folds with a level
" higher than this number will be closed.
let g:tagbar_foldlevel = 2
"}}}

" {{{ TagBar FileType Options
" {{{ tagbar_type_cpp
let g:tagbar_type_cpp = {
            \ 'ctagstype': 'c++',
            \ 'sro': '::',
            \ 'kinds': [
            \     'd:macros:1:0',
            \     'p:prototypes:1:0',
            \     'g:enums',
            \     'e:enumerators:0:0',
            \     't:typedefs:0:0',
            \     'n:namespaces',
            \     'c:classes',
            \     's:structs',
            \     'u:unions',
            \     'f:functions',
            \     'm:members:0:0',
            \     'v:variables:0:0'
            \ ],
            \ 'kind2scope': {
            \     'g': 'enum',
            \     'n': 'namespace',
            \     'c': 'class',
            \     's': 'struct',
            \     'u': 'union'
            \ },
            \ 'scope2kind': {
            \     'enum': 'g',
            \     'namespace': 'n',
            \     'class': 'c',
            \     'struct': 's',
            \     'union': 'u'
            \ }
            \ }
"}}}

" {{{ tagbar_type_html
let g:tagbar_type_html = {
            \ 'ctagstype': 'html',
            \ 'kinds': [
            \     'f:Javascript function',
            \     'a:named Anchor',
            \ ]
            \ }
"}}}

" {{{ tagbar_type_javascript
let g:tagbar_type_javascript = {
            \ 'ctagstype': 'Javascript',
            \ 'kinds': [
            \     'f:Functions',
            \     'c:Classes',
            \     'm:Methods',
            \     'p:Properties',
            \     'v:Global:variables',
            \     'r:Object',
            \     'r:Function',
            \     'r:Function',
            \     'r:Array',
            \     'r:String',
            \     'r:String'
            \ ]
            \ }
"}}}

" {{{ tagbar_type_php
let g:tagbar_type_php = {
            \ 'ctagstype': 'php',
            \ 'sro': '->',
            \ 'kinds': [
            \     'c:classes',
            \     'i:interfaces',
            \     'd:constant definitions',
            \     'f:functions',
            \     'v:variables',
            \     'j:javascript functions'
            \ ]
            \ }
"}}}

" {{{ tagbar_type_python
let g:tagbar_type_python = {
            \ 'ctagstype': 'python',
            \ 'sro': '.',
            \ 'kinds': [
            \     'i:Imports',
            \     'm:Class:members',
            \     'c:Classes',
            \     'f:Functions',
            \     'v:Variables'
            \ ]
            \ }
"}}}

" {{{ tagbar_type_sh
let g:tagbar_type_sh = {
            \ 'ctagstype': 'sh',
            \ 'kinds': [
            \     'f:Functions',
            \     'a:Alias',
            \     'v:Variable',
            \     'o:Options'
            \ ]
            \ }
"}}}

" {{{ tagbar_type_sql
let g:tagbar_type_sql = {
            \ 'replace': 1,
            \ 'ctagstype': 'sql',
            \ 'kinds': [
            \     'P:Packages',
            \     'd:Prototypes',
            \     'c:Cursors',
            \     'f:Functions',
            \     'F:Record fields:1:0',
            \     'L:Block label',
            \     'p:Procedures',
            \     's:Subtypes',
            \     't:Tables',
            \     'T:Triggers',
            \     'v:Variables',
            \     'i:Indexes',
            \     'e:Events',
            \     'U:Publications',
            \     'R:Services',
            \     'D:Domains',
            \     'V:Views',
            \     'n:Synonyms'
            \ ]
            \ }
"}}}

" {{{ tagbar_type_sshconfig
let g:tagbar_type_sshconfig = {
            \ 'ctagstype': 'sshconfig',
            \ 'kinds': [
            \     'h:Host'
            \ ]
            \ }
"}}}

" {{{ tagbar_type_tex
let g:tagbar_type_tex = {
            \ 'ctagstype': 'latex',
            \ 'kinds': [
            \     's:Sections',
            \     'g:Graphics:0:0',
            \     'l:Labels',
            \     'r:Refs:1:0',
            \     'p:Pagerefs:1:0'
            \ ]
            \ }
"}}}
"}}}
"}}}

" {{{ TagBar PHPCTags
" {{{ tagbar_phpctags_bin
" Location of phpctags.
let g:tagbar_phpctags_bin = g:vimfiles . '/bundle/PHPCTags/bin/phpctags'
"}}}

" {{{ tagbar_phpctags_memory_limit
" The amount of memory that phpctags can use can be configured.
let g:tagbar_phpctags_memory_limit = '1G'
"}}}
"}}}

" {{{ Undotree
" {{{ undotree_WindowLayout
" Set the undotree window layout.
let g:undotree_WindowLayout = 4
"}}}

" {{{ mappings
nnoremap <silent> <leader>Ut :UndotreeToggle<cr>
"}}}
"}}}

" {{{ Unite
" {{{ unite_data_directory
" Specify directories to store unite configurations. Used by both unite itself
" and its sources. If the directory doesn't exist, the directory is
" automatically created. For example source of file_mru saves the information of
" the most recent used files into this directory.
let g:unite_data_directory = g:vimfiles . '/tmp/unit/'
"}}}

" {{{ unite_source_buffer_time_format
" Specify the output format of the last access time of unite-source-buffer. Uses
" strftime() formatting.
let g:unite_source_buffer_time_format = '%Y-%m-%d %H:%M'
"}}}

" {{{ unite_source_bookmark_directory
" Specify the directory where |unite-source-bookmark| writes its bookmarks.
if !isdirectory(g:vimfiles."/bookmarks")
    call mkdir(g:vimfiles."/bookmarks")
endif
let g:unite_source_bookmark_directory = g:vimfiles . '/bookmarks'
"}}}

" {{{ unite_source_grep_max_candidates
" Set the max number of |unite-source-grep| candidates.
let g:unite_source_grep_max_candidates = 250
"}}}

" {{{ unite_source_history_yank_enable
" If defined and not 0, unite enables unite-source-history/yank.
let g:unite_source_history_yank_enable = 1
"}}}

" {{{ unite_source_history_yank_file
" Specify the file to write the information of yank history. If this variable is
" empty, saving history is disabled.
let g:unite_source_history_yank_file = g:vimfiles . '/tmp/yank'
"}}}

" {{{ unite#custom#profile()
call unite#custom#profile(
            \ 'default', 'context', {
            \    'prompt': 'unite: ',
            \    'winheight': 15
            \ })
"}}}

" {{{ mappings
nmap <silent> <leader>u :Unite -buffer-name=unite<cr>
nmap <silent> <leader>uB :Unite -buffer-name=bookmark -quick-match bookmark<cr>
nmap <silent> <leader>ub :Unite -buffer-name=buffer -quick-match buffer_tab<cr>
nmap <silent> <leader>ug :Unite -buffer-name=grep -start-insert grep:.<cr>
nmap <silent> <leader>uj :Unite -buffer-name=tabs jump<cr>
nmap <silent> <leader>um :Unite -buffer-name=menu -start-insert menu<cr>
nmap <silent> <leader>umd :Unite -buffer-name=mru -quick-match neomru/directory<cr>
nmap <silent> <leader>umf :Unite -buffer-name=mru -quick-match neomru/file<cr>
nmap <silent> <leader>uo :Unite -buffer-name=outline -quick-match outline<cr>
nmap <silent> <leader>ur :Unite -buffer-name=register register<cr>
nmap <silent> <leader>us :Unite -buffer-name=session session<cr>
nmap <silent> <leader>ut :Unite -buffer-name=tabs -start-insert tab<cr>
nmap <silent> <leader>uTf :Unite -buffer-name=tag-file -quick-match tag/file<cr>
nmap <silent> <leader>uTi :Unite -buffer-name=tag-include -quick-match tag/include<cr>
nmap <silent> <leader>uTt :Unite -buffer-name=tag -quick-match tag<cr>
nmap <silent> <leader>uy :Unite -buffer-name=history history/yank<cr>

nmap <silent> <C-p> :Unite -buffer-name=files -start-insert file_rec/git<cr>
"}}}
"}}}

" {{{ UniteMRU
" {{{ neomru#time_format
" Specify the output format of the modified file in MRU sources. Uses strftime()
" formatting.
let g:neomru#time_format = ' %Y-%m-%d %H:%M '
"}}}

" {{{ neomru#update_interval
" Specify the update interval to save updated mru files/directories to disk.
let g:neomru#update_interval = 3600
"}}}

" {{{ neomru#file_mru_path
" Specifies the file to write the information of most recent used files.
let g:neomru#file_mru_path = g:vimfiles . '/tmp/mru/files'
let g:neomru#directory_mru_path = g:vimfiles . '/tmp/mru/directory'
"}}}
"}}}

" {{{ VDebug
let g:vdebug_options = {
            \ 'break_on_open': 1,
            \ 'continuous_mode': 0,
            \ 'debug_file': 'debug.log',
            \ 'debug_file_level': 2,
            \ 'debug_window_level': 0,
            \ 'ide_key': '',
            \ 'marker_closed_tree': '▸',
            \ 'marker_default': '⬦',
            \ 'marker_open_tree': '▾',
            \ 'on_close': 'detach',
            \ 'port': '9000',
            \ 'server': '',
            \ 'timeout': 60,
            \ 'watch_window_style': 'expanded'
            \ }
"}}}

" {{{ Whitespace
" {{{ mappings
nnoremap ,Wd <silent> :DisableWhitespace<cr>
nnoremap ,We <silent> :EnableWhitespace<cr>
nnoremap ,Ws <silent> :StripWhitespace<cr>
nnoremap ,Wt <silent> :ToogleWhitespace<cr>
"}}}
"}}}

" vim: filetype=vim textwidth=80 foldmethod=marker
