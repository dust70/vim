" {{{<Leader>/mapleader
" To define a mapping which uses the 'mapleader' variable, the special string
" '<Leader>' can be used. It is replaced with the string value of 'mapleader'.
" If 'mapleader' is not set or empty, a backslash is used instead.
let mapleader=","
noremap \ ,
"}}}

" {{{ F1
" remove this stupid mapping
noremap  <F1> <nop>
inoremap <F1> <nop>
nnoremap <F1> <nop>
"}}}

" {{{ C-p/C-n in command mode
cnoremap <silent> <C-p> <Up>
cnoremap <silent> <C-n> <Down>
" }}}

" {{{ foldlevel
nnoremap <silent> <Leader>1 :setlocal foldlevel=0<cr>
nnoremap <silent> <Leader>2 :setlocal foldlevel=1<cr>
nnoremap <silent> <Leader>3 :setlocal foldlevel=2<cr>
nnoremap <silent> <Leader>4 :setlocal foldlevel=3<cr>
nnoremap <silent> <Leader>5 :setlocal foldlevel=4<cr>
nnoremap <silent> <Leader>6 :setlocal foldlevel=5<cr>
nnoremap <silent> <Leader>7 :setlocal foldlevel=6<cr>
nnoremap <silent> <Leader>8 :setlocal foldlevel=7<cr>
nnoremap <silent> <Leader>9 :setlocal foldlevel=8<cr>
nnoremap <silent> <Leader>0 :setlocal foldlevel=9<cr>
"}}}

" {{{ number
nnoremap <silent> <Leader>n :set nonumber!<cr>:set number?<cr>
"}}}

" {{{ spell
noremap <Leader>S :set spell!<cr>
"}}}

" {{{ format file
function! FormatFile()
    execute "normal msHmtgg"
    execute "normal gg=G"
    execute "normal 'tzt`s"
endfunction
nnoremap <silent> <Leader>m :call FormatFile()<cr>
"}}}

" {{{ hlsearch
if &t_Co > 2 || has("gui_running")
    nnoremap <silent> <Leader>L :set nohlsearch!<cr>:set hlsearch?<cr>
endif
"}}}

" {{{ paste
nnoremap <silent> <Leader>P :set invpaste<cr>
"}}}

" {{{ cscope
if has("cscope")
    nnoremap <silent> <Leader>cf :cscope find s <C-R>=expand("<cword>")<cr><cr>
endif
"}}}

" {{{ don't use Ex mode, use Q for formatting
nnoremap <silent> Q gq
"}}}

" {{{ place the cursor by default after the inserted text
nnoremap <silent> p gp
nnoremap <silent> P gP
"}}}

" {{{ the default behaviour should be available too
nnoremap <silent> gp p
nnoremap <silent> gP P
"}}}

" {{{ buffers
nnoremap <silent> <Leader>bl :confirm buffers<cr>
nnoremap <silent> <Leader>bn :confirm bnext<cr>
nnoremap <silent> <Leader>bp :confirm bprevious<cr>
"}}}

" {{{ write/close buffers
nnoremap <silent> <Leader>bq :confirm bdelete<cr>
nnoremap <silent> <Leader>bQ :confirm quitall<cr>
nnoremap <silent> <Leader>bw :write<cr>
nnoremap <silent> <Leader>bW :wall<cr>
"}}}

" {{{ tabs
nnoremap <silent> <Leader>t :tabnew<cr>
nnoremap <silent> <Leader>t$ :tabmove<cr>
nnoremap <silent> <Leader>t<left> :tabmove -1<cr>
nnoremap <silent> <Leader>t<right> :tabmove +1<cr>
nnoremap <silent> <Leader>t^ :tabmove 0<cr>
nnoremap <silent> <Leader>tl :tabs<cr>
"}}}

" {{{replace german umlauts
imap <silent> Ä Ae
imap <silent> Ö Oe
imap <silent> Ü Ue
imap <silent> ß ss
imap <silent> ä ae
imap <silent> ö oe
imap <silent> ü ue
"}}}

" {{{ quickfix
nnoremap <silent> <Leader>qo :cwindow<cr>
nnoremap <silent> <Leader>qc :close<cr>
"}}}

" {{{ diff
nnoremap <silent> <Leader>Du :diffupdate
" }}}

" vim: filetype=vim textwidth=80 foldmethod=marker
