include php.snip

########################################################################
# {{{ PHP
########################################################################
delete p
delete var_dump

snippet php
options head
	<?php

	${1:TARGET}

snippet pphp
options word
	<?php ${1:TARGET} ?>

snippet class
options head
	<?php

	/**
	 * @author René Six <${1:info@renatius.de}>
	 */
	class ${2:`vim_snippets#Filename()`}
	{
		${0}
	}

snippet clas
options head
	<?php

	/**
	 * @author René Six <${1:info@renatius.de}>
	 */
	class ${1:`vim_snippets#Filename()`}
	{
		${0}
	}

snippet class_extends
alias ce classextends
options head
	<?php

	/**
	 * @author René Six <${1:info@renatius.de}>
	 */
	class ${1:`vim_snippets#Filename()`} extends ${2:Foo\Bar\Baz}
	{
		${0}
	}

snippet construct
abbr con
alias __construct con constructor
options head
        ${1:public} function __construct(${2})
	{
		throw new Exception('Not implemented yet.');
	}

snippet function
alias fun
options head
	${1:public} function ${2:#:FunctionName}(${3})
	{
		${4:#:code}
		throw new Exception('Not implemented yet.');
	}

snippet functionclosure
alias funclosure
options head
        function(${1}) {
                ${2:#:code}
        }

snippet t
options word
	$this
snippet t-
options word
	$this->

snippet throw
options word
        throw new ${1:Exception}('${2:#:Exception message}');${3}

snippet ?=
options word
	<?=${1}?>${0}

snippet ?=h
options word
	<?=htmlspecialchars(${1})?>${0}

snippet pecho
options word
        ${1}<?php echo ${2}; ?>${0}

snippet pecho?
options word
        ${1}<?php echo (${2:condition} ? '${3:true}' : '${4:false}'); ?>${0}

snippet try
options head
	try {
		${0:#:code}
	} catch (${1:Exception} $e) {
		$e->getMessage();
	} finally {
		${2:#:code}
	}

snippet sdump
options word
	dump(${0:#:code});
        die();

snippet psdump
options word
        <?php
        dump(${0:#:code});
        die();
        ?>

snippet zdump
options word
	Zend_Debug::dump(${0:#:code});
        die();

snippet zdump2
options word
	\Zend\Debug\Debug::dump(${0:#:code});
        die();

snippet pzdump
options word
        <?php
        Zend_Debug::dump(${0:#:code});
        die();
        ?>

snippet pzdump2
options word
        <?php
        \Zend\Debug\Debug::dump(${0:#:code});
        die();
        ?>

snippet for
options head
        for ($${1:i} = ${2:0}; $$1 < ${3}; $$1++) {
                ${0:TARGET}
        }

snippet foreach
options head
	foreach ($${1:#:variable} as $${2:value}) {
		${0}
	}

snippet foreachhashmap
options head
	foreach ($${1:#:variable} as $${2:key} => $${3:value}) {
		${0}
	}

snippet pforeach
options head
	<?php foreach ($${1:#:variable} as $${2:value}) : ?>
		${0}
        <?php endforeach; ?>

snippet pforeachhashmap
options head
	<?php foreach ($${1:#:variable} as $${2:key} => $${3:value}) : ?>
		${0}
        <?php endforeach; ?>

snippet triggererror
alias trigger_error
options head
        trigger_error(${1:'Deprecation warning ' . __CLASS__}, ${2:E_USER_WARNING});

snippet deprecated
alias depre
options word
        @deprecated
#}}}

########################################################################
# {{{ PHP-Unit
########################################################################
snippet classtest
options head
	<?php

	/**
	 * @author René Six <${1:info@renatius.de}>
         *
         * @group ${8:group}
	 */
	class ${2:`vim_snippets#Filename()`} extends ${3:PHPUnit_Framework_TestCase}
	{
                /**
                 * @var ${7:ClassToTest}
                 */
		private $_object = null;

                /**
                 * @var Pimple
                 */
		private $_pimple = null;

		/**
                 * {@inerhitdoc}
		 */
		public function setUp()
		{
			parent::setUp();

                        $this->_pimple = new Pimple();
			$this->_object = new ${3:ClassToTest}(${4});${5}
		}
	}
        ${6}

snippet classtest2
options head
	<?php
        namespace ${1:Name_Space_To_Use}

        use ${2:Class_To_Test};

        use PHPUnit_Framework_TestCase;

	/**
         * Test class
         *
	 * @author René Six <${3:info@renatius.de}>
         *
         * @group ${10:group}
	 */
	class ${4:`vim_snippets#Filename()`} extends ${5:PHPUnit_Framework_TestCase}
	{
                /**
                 * @var ${9:Class_To_Test}
                 */
		private $object = null;

		/**
                 * {@inheritdoc}
		 */
		public function setUp()
		{
			parent::setUp();
			$this->_object = new ${5:ClassToTest}(${6});${7}
		}
	}
        ${8}

snippet functiontest
alias funtest
options head
	public function test${1:#:FunctionName}()
	{
		${0:#:code}
		$this->fail('Not implemented yet.');
	}

snippet functiontest2
alias funtest2
options head
        /**
         * Test method
         *
         * @test
         /
	public function ${1:#:FunctionName}()
	{
		${0:#:code}
		$this->fail('Not implemented yet.');
	}

snippet fundataprovider
alias fundata
options head
	public function dataProviderFor${1}()
	{
                return array(
                        array(${2:values}),
                        array(${3})
                );
	}

snippet mockbuilder
alias mock
options word
        ${1} = $this
                ->getMockBuilder('${2:String $originalClassName}')
                ->disableOriginalConstructor()
                ->getMock();${3}

snippet     getMockBuilder
        ${1} = $this->getMockBuilder(${1:String $originalClassName})
                ->getMock();

snippet expects
alias exp
options word
        ${1}->expects($this->${2:once()})
                ->method('${3}')
                ->with($this->equalTo(${4}))
                ->will($this->returnValue(${5}));${6}

snippet aDispatch
alias dispatchAssert
options head
        $this->dispatch(${1});

        $this->assertModule(${2});
        $this->assertController(${3});
        $this->assertAction(${4});

snippet testSkipped
options head
        $this->markTestSkipped(${1});

snippet testIncomplete
alias mti
options head
        $this->markTestIncomplete(${1});

snippet dataProvider
alias @dataProvider
        /**
         * @dataProvider dataProviderFor${1}
         */${0}

snippet depends
alias @depends
        /**
         * @depends ${1}
         */${0}

snippet expectedException
alias @expectedException
        /**
         * @expectedException ${1}
         */${0}

snippet group
alias @group
        /**
         * @group ${1}
         */${0}

snippet aArrayHasKey
alias assertArrayHasKey
        $this->assertArrayHasKey(${1:key}, ${2:array});

snippet aArrayNotHasKey
alias assertArrayNotHasKey
        $this->assertArrayNotHasKey(${1:key}, ${2:array});

snippet aClassHasAttribute
alias assertClassHasAttribute
        $this->assertClassHasAttribute(${1:attributeName}, ${2:className});

snippet aClassNotHasAttribute
alias assertClassNotHasAttribute
        $this->assertClassNotHasAttribute(${1:attributeName}, ${2:className});

snippet aClassHasStaticAttribute
alias assertClassHasStaticAttribute
        $this->assertClassHasStaticAttribute(${1:attributeName}, ${2:className});

snippet aClassNotHasStaticAttribute
alias assertClassNotHasStaticAttribute
        $this->assertClassNotHasStaticAttribute(${1:attributeName}, ${2:className});

snippet aContains
alias assertContains
        $this->assertContains(${1:needle}, ${2:haystack});

snippet aNotContains
alias assertNotContains
        $this->assertNotContains(${1:needle}, ${2:haystack});

snippet aAttributeContains
alias assertAttributeContains
        $this->assertAttributeContains(${1:needle}, ${2:haystackAttributeName}, ${3:haystackClassOrObject});

snippet aAttributeNotContains
alias assertAttributeNotContains
        $this->assertAttributeNotContains(${1:needle}, ${2:haystackAttributeName}, ${3:haystackClassOrObject});

snippet aContainsOnly
alias assertContainsOnly
        $this->assertContainsOnly(${1:type}, ${2:haystack});

snippet aNotContainsOnly
alias assertNotContainsOnly
        $this->assertNotContainsOnly(${1:type}, ${2:haystack});

snippet aAttributeContainsOnly
alias assertAttributeContainsOnly
        $this->assertAttributeContainsOnly(${1:type}, ${2:haystack});

snippet aAttributeNotContainsOnly
alias assertAttributeNotContainsOnly
        $this->assertAttributeNotContainsOnly(${1:type}, ${2:haystack});

snippet aEmpty
alias assertEmpty
        $this->assertEmpty(${1:actual});

snippet aNotEmpty
alias assertNotEmpty
        $this->assertNotEmpty(${1:actual});

snippet aAttributeEmpty
alias assertAttributeEmpty
        $this->assertAttributeEmpty(${1:actual});

snippet aAttributeNotEmpty
alias assertAttributeNotEmpty
        $this->assertAttributeNotEmpty(${1:actual});

snippet aEqualXMLStructure
alias assertEqualXMLStructure
        $this->assertEqualXMLStructure(${1:expectedElement}, ${2:actualElement});

snippet aEquals
alias assertEquals
        $this->assertEquals(${1:expected}, ${2:actual});

snippet aNotEquals
alias assertNotEquals
        $this->assertNotEquals(${1:expected}, ${2:actual});

snippet aAttributeEquals
alias assertAttributeEquals
        $this->assertAttributeEquals(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});

snippet aAttributeNotEquals
alias assertAttributeNotEquals
        $this->assertAttributeNotEquals(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});

snippet aFalse
alias assertFalse
        $this->assertfalse(${1:condition});

snippet aTrue
alias assertTrue
        $this->assertfalse(${1:condition});

snippet aFileEquals
alias assertFileEquals
        $this->assertFileEquals(${1:expected}, ${2:actual});

snippet aFileNotEquals
alias assertFileNotEquals
        $this->assertFileNotEquals(${1:expected}, ${2:actual});

snippet aFileExists
alias assertFileExists
        $this->assertFileEquals(${1:filename});

snippet aFileNotExists
alias assertFileNotExists
        $this->assertFileNotEquals(${1:filename});

snippet aGreaterThan
alias assertGreaterThan
        $this->assertGreaterThan(${1:expected}, ${2:actual});

snippet aAttributeGreaterThan
alias assertAttributeGreaterThan
        $this->assertAttributeGreaterThan(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});

snippet aGreaterThanOrEqual
alias assertGreaterThanOrEqual
        $this->assertGreaterThanOrEqual(${1:expected}, ${2:actual});

snippet aAttributeGreaterThanOrEqual
alias assertAttributeGreaterThanOrEqual
        $this->assertAttributeGreaterThanOrEqual(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});

snippet aInstanceOf
alias assertInstanceOf
        $this->assertInstanceOf(${1:expected}, ${2:actual});

snippet aNotInstanceOf
alias assertNotInstanceOf
        $this->assertNotInstanceOf(${1:expected}, ${2:actual});

snippet aAttributeInstanceOf
alias assertAttributeInstanceOf
        $this->assertAttributeInstanceOf(${1:expected}, ${2:actualAttributeName});

snippet aAttributeNotInstanceOf
alias assertAttributeNotInstanceOf
        $this->assertAttributeNotInstanceOf(${1:expected}, ${2:actualAttributeName});

snippet aInternalType
alias assertInternalType
        $this->assertInternalType(${1:expected}, ${2:actual});

snippet aNotInternalType
alias assertNotInternalType
        $this->assertNotInternalType(${1:expected}, ${2:actual});

snippet aAttributeInternalType
alias assertAttributeInternalType
        $this->assertAttributeInternalType(${1:expected}, ${2:actualAttributeName});

snippet aAttributeNotInternalType
alias assertAttributeNotInternalType
        $this->assertAttributeNotInternalType(${1:expected}, ${2:actualAttributeName});

snippet aLessThan
alias assertLessThan
        $this->assertLessThan(${1:expected}, ${2:actual});

snippet aAttributeLessThan
alias assertAttributeLessThan
        $this->assertAttributeLessThan(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});

snippet aLessThanOrEqual
alias assertLessThanOrEqual
        $this->assertLessThanOrEqual(${1:expected}, ${2:actual});

snippet aAttributeLessThanOrEqual
alias assertAttributeLessThanOrEqual
        $this->assertAttributeLessThanOrEqual(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});

snippet aNull
alias assertNull
        $this->assertNull(${1:variable});

snippet aNotNull
alias assertNotNull
        $this->assertNotNull(${1:variable});

snippet aObjectHasAttribute
alias assertObjectHasAttribute
        $this->assertObjectHasAttribute(${1:attributeName}, ${2:object});

snippet aObjectNotHasAttribute
alias assertObjectNotHasAttribute
        $this->assertObjectNotHasAttribute(${1:attributeName}, ${2:object});

snippet aRedirect
alias assertRedirect
        $this->assertRedirect(${1});

snippet aRedirectTo
alias assertRedirectTo
        $this->assertRedirectTo(${1});

snippet aRegExp
alias assertRegExp
        $this->assertRegExp(${1:patern}, ${2:string});

snippet aNotRegExp
alias assertNotRegExp
        $this->assertNotRegExp(${1:patern}, ${2:string});

snippet aStringMatchesFormat
alias assertStringMatchesFormat
        $this->assertStringMatchesFormat(${1:format}, ${2:string});

snippet aStringNotMatchesFormat
alias assertStringNotMatchesFormat
        $this->assertStringNotMatchesFormat(${1:format}, ${2:string});

snippet aStringMatchesFormatFile
alias assertStringMatchesFormatFile
        $this->assertStringMatchesFormatFile(${1:formatFile}, ${2:string});

snippet aStringNotMatchesFormatFile
alias assertStringNotMatchesFormatFile
        $this->assertStringNotMatchesFormatFile(${1:formatFile}, ${2:string});

snippet aSame
alias assertSame
        $this->assertSame(${1:expected}, ${2:actual});

snippet aNotSame
alias assertNotSame
        $this->assertNotSame(${1:expected}, ${2:actual});

snippet aAttributeSame
alias assertAttributeSame
        $this->assertAttributeSame(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});

snippet aAttributeNotSame
alias assertAttributeNotSame
        $this->assertAttributeNotSame(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});

snippet aSelectCount
alias assertSelectCount
        $tshi->assertSelectCount(${1:selector}, ${2:count}, ${3:actual});

snippet aSelectEquals
alias assertSelectEquals
        $this->assertSelectEquals(${1:selector}, ${2:content}, ${3:count}, ${4:actual});

snippet aSelectRegExp
        $this->assertSelectRegExp(${1:selector}, ${2:pattern}, ${3:count}, ${4:actual});

snippet aStringEndsWith
alias assertStringEndsWith
        $this->assertStringEndsWith(${1:suffix}, ${2:string});

snippet aStringEndsNotWith
alias assertStringEndsNotWith
        $this->assertStringEndsNotWith(${1:suffix}, ${2:string});

snippet aStringEqualsFile
alias assertStringEqualsFile
        $this->assertStringEqualsFile(${1:expectedFile}, ${2:actualString});

snippet aStringNotEqualsFile
alias assertStringNotEqualsFile
        $this->assertStringNotEqualsFile(${1:expectedFile}, ${2:actualString});

snippet aStringStartsWith
alias assertStringStartsWith
        $this->assertStringStartsWith(${1:prefix}, ${2:string});

snippet aStringStartsNotWith
alias assertStringStartsNotWith
        $this->assertStringStartsNotWith(${1:prefix}, ${2:string});

snippet aTag
alias assertTag
        $this->assertTag(${1:matcher}, ${2:actual});

snippet aNotTag
alias assertNotTag
        $this->assertNotTag(${1:matcher}, ${2:actual});

snippet aThat
alias assertThat
        $this->assertThat(${1:value}, ${2:PHPUnit_Framework_Constraint constraint});

snippet aResponseCode
alias assertResponseCode asr
        $this->assertResponseCode(${1:value});
#}}}

########################################################################
# {{{ coding style
########################################################################
snippet phpcs
options word
        // @codingStandardsIgnore${0:Start}

snippet pmd
options word
	@SuppressWarnings(PHPMD.${0:Foo})
#}}}

# vim: foldmethod=marker
