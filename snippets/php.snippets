include php.snip

delete p
delete var_dump

snippet php
options head
	<?php

	${1:TARGET}

snippet pphp
options word
	<?php ${1:TARGET} ?>

snippet class
options head
	<?php

	/**
	 * @author René Six <${1:info@renatius.de}>
	 */
	class ${2:`vim_snippets#Filename()`}
	{
		${0}
	}

snippet class_extends
alias ce classextends
options head
	<?php

	/**
	 * @author René Six <${1:info@renatius.de}>
	 */
	class ${1:`vim_snippets#Filename()`} extends ${2:Foo\Bar\Baz}
	{
		${0}
	}

snippet construct
abbr con
alias __construct con constructor
options head
	function __construct(${1})
	{
		throw new Exception('Not implemented yet.');
	}

snippet function
abbr function
alias fun
options head
	${1:public} function ${2:#:FunctionName}(${3})
	{
		${4:#:code}
		throw new Exception('Not implemented yet.');
	}
snippet t-
abbr t-
alias this
options word
	$this->

snippet const
options head
        const ${1:variableName} = ${2};
        ${0}

snippet pmd
options word
	@SuppressWarnings(PHPMD.${0:Foo})

snippet ?=
	<?php echo ${1}; ?>${0}

snippet ?=h
	<?php echo htmlspecialchars(${1}); ?>${0}

snippet pecho
        <?php echo ${1}; ?>${0}

snippet pecho?
        <?php echo (${1:condition} ? '${2:true}' : ${3:false}); ?>${0}

snippet try
options head
	try {
		${0:#:code}
	} catch (${1:Exception} $e) {
		$e->getMessage();
	} finally {
		${2:#:code}
	}

snippet dump
options word
	Zend_Debug::dump(${0:#:code});
        die();

snippet dump2
options word
	\Zend\Debug\Debug::dump(${0:#:code});
        die();

snippet pdump
options word
        <?php
        Zend_Debug::dump(${0:#:code});
        die();
        ?>

snippet pdump2
options word
        <?php
        \Zend\Debug\Debug::dump(${0:#:code});
        die();
        ?>

snippet for
options head
        for ($${1:i} = ${2:0}; $$1 < ${3}; $$1++) {
                ${0:TARGET}
        }

snippet foreach
options head
	foreach ($${1:#:variable} as $${4:value}) {
		${0}
	}

snippet foreach-hashmap
options head
	foreach ($${1:#:variable} as $${2:key}${3: =>} $${4:value}) {
		${0}
	}

snippet pforeach
options head
	<?php foreach ($${1:#:variable} as ${4:value}) : ?>
		${0}
        <?php endforeach; ?>

snippet pforeach-hashmap
options head
	<?php foreach ($${1:#:variable} as $${2:key}${3: =>} $${4:value}) : ?>
		${0}
        <?php endforeach; ?>

snippet array
        array(
                '${1}' => ${2} ${0}
        );


